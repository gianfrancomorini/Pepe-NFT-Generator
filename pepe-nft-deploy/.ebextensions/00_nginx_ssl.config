# .ebextensions/00_nginx_ssl.config

files:
  "/etc/nginx/conf.d/ssl.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      # HTTPS server
      server {
          listen 443 ssl;
          server_name pepenftgenerator.xyz www.pepenftgenerator.xyz;
          
          ssl_certificate /etc/letsencrypt/live/pepenftgenerator.xyz/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/pepenftgenerator.xyz/privkey.pem;
          
          ssl_session_timeout 5m;
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384";
          ssl_prefer_server_ciphers off;
          
          location / {
              proxy_pass http://localhost:8081;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_cache_bypass $http_upgrade;
          }
      }

      # Redirect HTTP to HTTPS
      server {
          listen 80;
          server_name pepenftgenerator.xyz www.pepenftgenerator.xyz;
          return 301 https://$server_name$request_uri;
      }

container_commands:
  01_install_awscli:
    command: |
      if ! command -v aws &> /dev/null; then
        echo "Installing AWS CLI..."
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install
        rm -rf aws awscliv2.zip
      fi
    ignoreErrors: false

  02_create_cert_dirs:
    command: |
      echo "Creating certificate directories..."
      sudo mkdir -p /etc/letsencrypt/live/pepenftgenerator.xyz/
      sudo mkdir -p /etc/letsencrypt/archive/pepenftgenerator.xyz/
      sudo chown -R root:root /etc/letsencrypt
      sudo chmod -R 755 /etc/letsencrypt
      echo "Directory contents:"
      ls -la /etc/letsencrypt/live/pepenftgenerator.xyz/
    ignoreErrors: false
    
  03_copy_ssl_certs:
    command: |
      echo "Starting SSL certificate copy process..."
      
      # Debug AWS CLI version and credentials
      aws --version
      aws sts get-caller-identity
      
      # Debug S3 access
      echo "Testing S3 bucket access..."
      aws s3 ls s3://pepenft-ssl-certificates/ssl/ --debug
      
      # Create temporary directory
      TEMP_DIR=$(mktemp -d)
      echo "Created temporary directory: $TEMP_DIR"
      
      # Download certificates with verbose output
      echo "Downloading fullchain.pem..."
      aws s3 cp s3://pepenft-ssl-certificates/ssl/fullchain.pem $TEMP_DIR/fullchain.pem --debug
      if [ $? -ne 0 ]; then
        echo "Failed to download fullchain.pem"
        exit 1
      fi
      
      echo "Downloading privkey.pem..."
      aws s3 cp s3://pepenft-ssl-certificates/ssl/privkey.pem $TEMP_DIR/privkey.pem --debug
      if [ $? -ne 0 ]; then
        echo "Failed to download privkey.pem"
        exit 1
      fi
      
      # Check files in temp directory
      echo "Checking downloaded files..."
      ls -l $TEMP_DIR
      
      # Copy files to final location with sudo
      echo "Copying files to final location..."
      sudo cp -v $TEMP_DIR/fullchain.pem /etc/letsencrypt/live/pepenftgenerator.xyz/
      sudo cp -v $TEMP_DIR/privkey.pem /etc/letsencrypt/live/pepenftgenerator.xyz/
      
      # Set permissions
      echo "Setting file permissions..."
      sudo chmod 644 /etc/letsencrypt/live/pepenftgenerator.xyz/fullchain.pem
      sudo chmod 600 /etc/letsencrypt/live/pepenftgenerator.xyz/privkey.pem
      
      # Verify final files
      echo "Verifying final files..."
      ls -l /etc/letsencrypt/live/pepenftgenerator.xyz/
      
      # Check file contents (first line only)
      echo "Checking certificate content..."
      sudo head -n 1 /etc/letsencrypt/live/pepenftgenerator.xyz/fullchain.pem
      
      # Cleanup
      rm -rf $TEMP_DIR
      
      echo "SSL certificate copy process completed"
    leader_only: true

  04_fix_types_hash:
    command: |
      echo "Fixing types_hash settings..."
      sudo bash -c 'echo "types_hash_max_size 4096;" > /etc/nginx/conf.d/types_hash.conf'
      sudo bash -c 'echo "types_hash_bucket_size 128;" >> /etc/nginx/conf.d/types_hash.conf'
    ignoreErrors: false

  05_verify_nginx_config:
    command: |
      echo "Verifying nginx configuration..."
      sudo nginx -t -v 2>&1
    ignoreErrors: false

  06_reload_nginx:
    command: |
      echo "Reloading nginx..."
      sudo service nginx reload || {
        echo "Reload failed, attempting restart..."
        sudo service nginx restart
      }
    ignoreErrors: false

option_settings:
  aws:elasticbeanstalk:application:environment:
    NODE_ENV: production
    PORT: 8081