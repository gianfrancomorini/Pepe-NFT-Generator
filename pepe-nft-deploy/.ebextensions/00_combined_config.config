# .ebextensions/00_combined_config.config

option_settings:
  # Instance Configuration
  aws:autoscaling:launchconfiguration:
    InstanceType: t2.medium  # Increased from t2.small
    RootVolumeSize: "30"    # Increased from 20
    IamInstanceProfile: aws-elasticbeanstalk-ec2-role
    SecurityGroups: default

  # Application Environment
  aws:elasticbeanstalk:application:environment:
    NODE_ENV: production
    NPM_USE_PRODUCTION: false
    PORT: 8080
    NODE_OPTIONS: "--max-old-space-size=4096"  # Increased memory limit

  # Health Check Configuration
  aws:elasticbeanstalk:environment:process:default:
    Port: 8080
    HealthCheckPath: /api/health
    HealthCheckInterval: 15
    HealthCheckTimeout: 5
    HealthyThresholdCount: 3
    UnhealthyThresholdCount: 5
    DeregistrationDelay: 20
    MatcherHTTPCode: 200

  # Deployment Settings
  aws:elasticbeanstalk:command:
    Timeout: 1800
    BatchSizeType: Fixed
    BatchSize: 1

  # Enhanced Health Reporting
  aws:elasticbeanstalk:healthreporting:system:
    SystemType: enhanced
    HealthCheckSuccessThreshold: Warning

commands:
  01_install_dependencies:
    command: |
      yum update -y
      yum install -y gcc-c++ make
    ignoreErrors: true
  
  02_setup_npm:
    command: |
      curl -sL https://rpm.nodesource.com/setup_20.x | bash -
      yum install -y nodejs
      npm install -g npm@latest
      npm cache clean --force
    ignoreErrors: true

  03_setup_logs:
    command: |
      mkdir -p /var/log/nodejs
      touch /var/log/nodejs/node.log
      chmod 777 /var/log/nodejs/node.log
    ignoreErrors: true

container_commands:
  01_node_build_setup:
    command: |
      mkdir -p /var/app/staging/node_modules
      chmod -R 777 /var/app/staging/node_modules
      echo "Node version: $(node -v)" >> /var/log/nodejs/node.log
      echo "NPM version: $(npm -v)" >> /var/log/nodejs/node.log
    ignoreErrors: true

  02_install_dependencies:
    command: |
      cd /var/app/staging
      npm ci --production=false
      npm audit fix || true
    ignoreErrors: true

  03_build_app:
    command: |
      cd /var/app/staging
      npm run build
      echo "Build completed at $(date)" >> /var/log/nodejs/node.log
    leader_only: true

  04_save_build_info:
    command: |
      echo "Deployment finished at $(date)" >> /var/log/nodejs/node.log
      echo "Environment variables:" >> /var/log/nodejs/node.log
      env | sort >> /var/log/nodejs/node.log
    ignoreErrors: true

  05_install_certbot:
    command: |
      yum install -y python3-pip
      pip3 install certbot certbot-nginx
    ignoreErrors: true
    
  06_setup_ssl:
    command: |
      if [ ! -d "/etc/letsencrypt/live/pepenftgenerator.xyz" ]; then
        certbot --nginx -d pepenftgenerator.xyz -d www.pepenftgenerator.xyz --non-interactive --agree-tos --email your-email@example.com
      fi
    ignoreErrors: true

files:
  "/opt/elasticbeanstalk/hooks/appdeploy/post/99_fix_permissions.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      chmod -R 755 /var/app/current/node_modules
      chown -R webapp:webapp /var/app/current

files:
  "/etc/nginx/conf.d/proxy.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      # Enable HTTPS redirect and security headers
      server {
          listen 80;
          server_name pepenftgenerator.xyz www.pepenftgenerator.xyz;
          
          # Redirect HTTP to HTTPS
          return 301 https://$host$request_uri;
      }

      server {
          listen 443 ssl;
          server_name pepenftgenerator.xyz www.pepenftgenerator.xyz;

          # SSL configuration
          ssl_certificate /etc/letsencrypt/live/pepenftgenerator.xyz/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/pepenftgenerator.xyz/privkey.pem;
          
          # SSL settings
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_ciphers HIGH:!aNULL:!MD5;
          ssl_prefer_server_ciphers on;
          
          # Security headers
          add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header X-Frame-Options "SAMEORIGIN" always;
          add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval'; img-src 'self' https: data: blob:; font-src 'self' https: data:; connect-src 'self' https: wss:; frame-ancestors 'self';" always;
          
          # Root directory
          root /var/app/current/build;
          
          # Handle React router
          location / {
              try_files $uri $uri/ /index.html;
              
              # Additional security headers for static content
              add_header Cache-Control "public, max-age=3600";
          }
          
          # Handle API requests
          location /api {
              proxy_pass http://localhost:8080;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_cache_bypass $http_upgrade;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
          }
          
          # Static file caching
          location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
              expires 30d;
              add_header Cache-Control "public, no-transform";
          }
      }