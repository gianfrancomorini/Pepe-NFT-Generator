{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\nconst CID = require('cids');\n\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nmodule.exports = async function* normaliseInput(input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  // CID|String\n  if (CID.isCID(input)) {\n    yield toPin({\n      cid: input\n    });\n    return;\n  }\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({\n      path: input\n    });\n    return;\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-ignore - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-ignore\n    return yield toPin(input);\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.iterator]();\n    const first = iterator.next();\n    if (first.done) return iterator;\n\n    // Iterable<CID|String>\n    if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        cid: first.value\n      });\n      for (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n      return;\n    }\n\n    // Iterable<{ cid: CID recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  // AsyncIterable<?>\n  if (Symbol.asyncIterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.asyncIterator]();\n    const first = await iterator.next();\n    if (first.done) return iterator;\n\n    // AsyncIterable<CID|String>\n    if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        cid: first.value\n      });\n      for await (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n      return;\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for await (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n};\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin(input) {\n  const path = input.cid || `${input.path}`;\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  };\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n  return pin;\n}","map":{"version":3,"names":["errCode","require","CID","module","exports","normaliseInput","input","undefined","Error","isCID","toPin","cid","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","pin","recursive","metadata"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-core-utils/src/pins/normalise-input.js"],"sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst CID = require('cids')\n\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nmodule.exports = async function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID|String\n  if (CID.isCID(input)) {\n    yield toPin({ cid: input })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-ignore - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-ignore\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n    if (first.done) return iterator\n\n    // Iterable<CID|String>\n    if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<{ cid: CID recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (Symbol.asyncIterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID|String>\n    if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}