{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\nconst multicodec = require('multicodec');\nconst loadFormat = require('../lib/ipld-formats');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  const getBlock = require('../block/get')(opts);\n  const dagResolve = require('./resolve')(opts);\n  const load = loadFormat(opts.ipld);\n\n  /**\n   * @type {DAGAPI[\"get\"]}\n   */\n  const get = async (cid, options = {}) => {\n    const resolved = await dagResolve(cid, options);\n    const block = await getBlock(resolved.cid, options);\n    const codecName = multicodec.getName(resolved.cid.code);\n    const format = await load(codecName);\n    if (resolved.cid.code === multicodec.RAW && !resolved.remainderPath) {\n      resolved.remainderPath = '/';\n    }\n    return format.resolver.resolve(block.data, resolved.remainderPath || '');\n  };\n  return get;\n});","map":{"version":3,"names":["configure","require","multicodec","loadFormat","module","exports","api","opts","getBlock","dagResolve","load","ipld","get","cid","options","resolved","block","codecName","getName","code","format","RAW","remainderPath","resolver","resolve","data"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/dag/get.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst multicodec = require('multicodec')\nconst loadFormat = require('../lib/ipld-formats')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  const getBlock = require('../block/get')(opts)\n  const dagResolve = require('./resolve')(opts)\n  const load = loadFormat(opts.ipld)\n\n  /**\n   * @type {DAGAPI[\"get\"]}\n   */\n  const get = async (cid, options = {}) => {\n    const resolved = await dagResolve(cid, options)\n    const block = await getBlock(resolved.cid, options)\n\n    const codecName = multicodec.getName(resolved.cid.code)\n    const format = await load(codecName)\n\n    if (resolved.cid.code === multicodec.RAW && !resolved.remainderPath) {\n      resolved.remainderPath = '/'\n    }\n\n    return format.resolver.resolve(block.data, resolved.remainderPath || '')\n  }\n\n  return get\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAY,CAAC;AACxC,MAAME,UAAU,GAAGF,OAAO,CAAC,qBAAqB,CAAC;;AAEjD;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAGL,SAAS,CAAC,CAACM,GAAG,EAAEC,IAAI,KAAK;EACxC,MAAMC,QAAQ,GAAGP,OAAO,CAAC,cAAc,CAAC,CAACM,IAAI,CAAC;EAC9C,MAAME,UAAU,GAAGR,OAAO,CAAC,WAAW,CAAC,CAACM,IAAI,CAAC;EAC7C,MAAMG,IAAI,GAAGP,UAAU,CAACI,IAAI,CAACI,IAAI,CAAC;;EAElC;AACF;AACA;EACE,MAAMC,GAAG,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IACvC,MAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACI,GAAG,EAAEC,OAAO,CAAC;IAC/C,MAAME,KAAK,GAAG,MAAMR,QAAQ,CAACO,QAAQ,CAACF,GAAG,EAAEC,OAAO,CAAC;IAEnD,MAAMG,SAAS,GAAGf,UAAU,CAACgB,OAAO,CAACH,QAAQ,CAACF,GAAG,CAACM,IAAI,CAAC;IACvD,MAAMC,MAAM,GAAG,MAAMV,IAAI,CAACO,SAAS,CAAC;IAEpC,IAAIF,QAAQ,CAACF,GAAG,CAACM,IAAI,KAAKjB,UAAU,CAACmB,GAAG,IAAI,CAACN,QAAQ,CAACO,aAAa,EAAE;MACnEP,QAAQ,CAACO,aAAa,GAAG,GAAG;IAC9B;IAEA,OAAOF,MAAM,CAACG,QAAQ,CAACC,OAAO,CAACR,KAAK,CAACS,IAAI,EAAEV,QAAQ,CAACO,aAAa,IAAI,EAAE,CAAC;EAC1E,CAAC;EAED,OAAOV,GAAG;AACZ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}