{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst {\n  Multiaddr\n} = require('multiaddr');\nconst toCamel = require('../lib/object-to-camel');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function* query(peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: new CID(`${peerId}`),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (let message of res.ndjson()) {\n      message = toCamel(message);\n      message.id = new CID(message.id);\n      message.responses = (message.responses || []).map((/** @type {{ ID: string, Addrs: string[] }} */{\n        ID,\n        Addrs\n      }) => ({\n        id: ID,\n        addrs: (Addrs || []).map((/** @type {string} **/a) => new Multiaddr(a))\n      }));\n      yield message;\n    }\n  }\n  return query;\n});","map":{"version":3,"names":["CID","require","Multiaddr","toCamel","configure","toUrlSearchParams","module","exports","api","query","peerId","options","res","post","timeout","signal","searchParams","arg","headers","message","ndjson","id","responses","map","ID","Addrs","addrs","a"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/dht/query.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: new CID(`${peerId}`),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.id = new CID(message.id)\n      message.responses = (message.responses || []).map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n        id: ID,\n        addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n      }))\n      yield message\n    }\n  }\n\n  return query\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAM;EAAEC;AAAU,CAAC,GAAGD,OAAO,CAAC,WAAW,CAAC;AAC1C,MAAME,OAAO,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AACjD,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAK,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,KAAKA,CAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC5C,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,WAAW,EAAE;MACtCC,OAAO,EAAEH,OAAO,CAACG,OAAO;MACxBC,MAAM,EAAEJ,OAAO,CAACI,MAAM;MACtBC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAE,IAAIjB,GAAG,CAAC,GAAGU,MAAM,EAAE,CAAC;QACzB,GAAGC;MACL,CAAC,CAAC;MACFO,OAAO,EAAEP,OAAO,CAACO;IACnB,CAAC,CAAC;IAEF,WAAW,IAAIC,OAAO,IAAIP,GAAG,CAACQ,MAAM,CAAC,CAAC,EAAE;MACtCD,OAAO,GAAGhB,OAAO,CAACgB,OAAO,CAAC;MAC1BA,OAAO,CAACE,EAAE,GAAG,IAAIrB,GAAG,CAACmB,OAAO,CAACE,EAAE,CAAC;MAChCF,OAAO,CAACG,SAAS,GAAG,CAACH,OAAO,CAACG,SAAS,IAAI,EAAE,EAAEC,GAAG,CAAC,CAAC,8CAA+C;QAAEC,EAAE;QAAEC;MAAM,CAAC,MAAM;QACnHJ,EAAE,EAAEG,EAAE;QACNE,KAAK,EAAE,CAACD,KAAK,IAAI,EAAE,EAAEF,GAAG,CAAC,CAAC,sBAAuBI,CAAC,KAAK,IAAIzB,SAAS,CAACyB,CAAC,CAAC;MACzE,CAAC,CAAC,CAAC;MACH,MAAMR,OAAO;IACf;EACF;EAEA,OAAOV,KAAK;AACd,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}