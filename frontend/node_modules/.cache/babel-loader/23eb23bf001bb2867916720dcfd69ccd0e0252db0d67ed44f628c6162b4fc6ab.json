{"ast":null,"code":"'use strict';\n\nconst Block = require('ipld-block');\nconst CID = require('cids');\nconst multihash = require('multihashes');\nconst multipartRequest = require('../lib/multipart-request');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst abortSignal = require('../lib/abort-signal');\nconst {\n  AbortController\n} = require('native-abort-controller');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  async function put(data, options = {}) {\n    if (Block.isBlock(data)) {\n      const {\n        name,\n        length\n      } = multihash.decode(data.cid.multihash);\n      options = {\n        ...options,\n        format: data.cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: data.cid.version\n      };\n      // @ts-ignore - data is typed as block so TS complains about\n      // Uint8Array assignment.\n      data = data.data;\n    } else if (options.cid) {\n      const cid = new CID(options.cid);\n      const {\n        name,\n        length\n      } = multihash.decode(cid.multihash);\n      options = {\n        ...options,\n        format: cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: cid.version\n      };\n      delete options.cid;\n    }\n\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    let res;\n    try {\n      // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n      const response = await api.post('block/put', {\n        timeout: options.timeout,\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(await multipartRequest(data, controller, options.headers))\n      });\n      res = await response.json();\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, {\n          ...options,\n          format: 'protobuf'\n        });\n      } else if (options.format === 'dag-cbor') {\n        return put(data, {\n          ...options,\n          format: 'cbor'\n        });\n      }\n      throw err;\n    }\n    return new Block(/** @type {Uint8Array} */data, new CID(res.Key));\n  }\n  return put;\n});","map":{"version":3,"names":["Block","require","CID","multihash","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","put","data","options","isBlock","name","length","decode","cid","format","codec","mhtype","mhlen","version","controller","signal","res","response","post","timeout","searchParams","headers","json","err","Key"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/block/put.js"],"sourcesContent":["'use strict'\n\nconst Block = require('ipld-block')\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  async function put (data, options = {}) {\n    if (Block.isBlock(data)) {\n      const { name, length } = multihash.decode(data.cid.multihash)\n      options = {\n        ...options,\n        format: data.cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: data.cid.version\n      }\n      // @ts-ignore - data is typed as block so TS complains about\n      // Uint8Array assignment.\n      data = data.data\n    } else if (options.cid) {\n      const cid = new CID(options.cid)\n      const { name, length } = multihash.decode(cid.multihash)\n      options = {\n        ...options,\n        format: cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: cid.version\n      }\n      delete options.cid\n    }\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    let res\n    try {\n      // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n      const response = await api.post('block/put', {\n        timeout: options.timeout,\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest(data, controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    }\n\n    return new Block((/** @type {Uint8Array} */ data), new CID(res.Key))\n  }\n\n  return put\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}