{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n$root.PBLink = function () {\n  /**\n   * Properties of a PBLink.\n   * @exports IPBLink\n   * @interface IPBLink\n   * @property {Uint8Array|null} [Hash] PBLink Hash\n   * @property {string|null} [Name] PBLink Name\n   * @property {number|null} [Tsize] PBLink Tsize\n   */\n\n  /**\n   * Constructs a new PBLink.\n   * @exports PBLink\n   * @classdesc Represents a PBLink.\n   * @implements IPBLink\n   * @constructor\n   * @param {IPBLink=} [p] Properties to set\n   */\n  function PBLink(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n\n  /**\n   * PBLink Hash.\n   * @member {Uint8Array} Hash\n   * @memberof PBLink\n   * @instance\n   */\n  PBLink.prototype.Hash = $util.newBuffer([]);\n\n  /**\n   * PBLink Name.\n   * @member {string} Name\n   * @memberof PBLink\n   * @instance\n   */\n  PBLink.prototype.Name = \"\";\n\n  /**\n   * PBLink Tsize.\n   * @member {number} Tsize\n   * @memberof PBLink\n   * @instance\n   */\n  PBLink.prototype.Tsize = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * Encodes the specified PBLink message. Does not implicitly {@link PBLink.verify|verify} messages.\n   * @function encode\n   * @memberof PBLink\n   * @static\n   * @param {IPBLink} m PBLink message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PBLink.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.Hash != null && Object.hasOwnProperty.call(m, \"Hash\")) w.uint32(10).bytes(m.Hash);\n    if (m.Name != null && Object.hasOwnProperty.call(m, \"Name\")) w.uint32(18).string(m.Name);\n    if (m.Tsize != null && Object.hasOwnProperty.call(m, \"Tsize\")) w.uint32(24).uint64(m.Tsize);\n    return w;\n  };\n\n  /**\n   * Decodes a PBLink message from the specified reader or buffer.\n   * @function decode\n   * @memberof PBLink\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {PBLink} PBLink\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PBLink.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n      m = new $root.PBLink();\n    while (r.pos < c) {\n      var t = r.uint32();\n      switch (t >>> 3) {\n        case 1:\n          m.Hash = r.bytes();\n          break;\n        case 2:\n          m.Name = r.string();\n          break;\n        case 3:\n          m.Tsize = r.uint64();\n          break;\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n    return m;\n  };\n\n  /**\n   * Creates a PBLink message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PBLink\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {PBLink} PBLink\n   */\n  PBLink.fromObject = function fromObject(d) {\n    if (d instanceof $root.PBLink) return d;\n    var m = new $root.PBLink();\n    if (d.Hash != null) {\n      if (typeof d.Hash === \"string\") $util.base64.decode(d.Hash, m.Hash = $util.newBuffer($util.base64.length(d.Hash)), 0);else if (d.Hash.length) m.Hash = d.Hash;\n    }\n    if (d.Name != null) {\n      m.Name = String(d.Name);\n    }\n    if (d.Tsize != null) {\n      if ($util.Long) (m.Tsize = $util.Long.fromValue(d.Tsize)).unsigned = true;else if (typeof d.Tsize === \"string\") m.Tsize = parseInt(d.Tsize, 10);else if (typeof d.Tsize === \"number\") m.Tsize = d.Tsize;else if (typeof d.Tsize === \"object\") m.Tsize = new $util.LongBits(d.Tsize.low >>> 0, d.Tsize.high >>> 0).toNumber(true);\n    }\n    return m;\n  };\n\n  /**\n   * Creates a plain object from a PBLink message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PBLink\n   * @static\n   * @param {PBLink} m PBLink\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  PBLink.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n    if (o.defaults) {\n      if (o.bytes === String) d.Hash = \"\";else {\n        d.Hash = [];\n        if (o.bytes !== Array) d.Hash = $util.newBuffer(d.Hash);\n      }\n      d.Name = \"\";\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, true);\n        d.Tsize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.Tsize = o.longs === String ? \"0\" : 0;\n    }\n    if (m.Hash != null && m.hasOwnProperty(\"Hash\")) {\n      d.Hash = o.bytes === String ? $util.base64.encode(m.Hash, 0, m.Hash.length) : o.bytes === Array ? Array.prototype.slice.call(m.Hash) : m.Hash;\n    }\n    if (m.Name != null && m.hasOwnProperty(\"Name\")) {\n      d.Name = m.Name;\n    }\n    if (m.Tsize != null && m.hasOwnProperty(\"Tsize\")) {\n      if (typeof m.Tsize === \"number\") d.Tsize = o.longs === String ? String(m.Tsize) : m.Tsize;else d.Tsize = o.longs === String ? $util.Long.prototype.toString.call(m.Tsize) : o.longs === Number ? new $util.LongBits(m.Tsize.low >>> 0, m.Tsize.high >>> 0).toNumber(true) : m.Tsize;\n    }\n    return d;\n  };\n\n  /**\n   * Converts this PBLink to JSON.\n   * @function toJSON\n   * @memberof PBLink\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  PBLink.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return PBLink;\n}();\n$root.PBNode = function () {\n  /**\n   * Properties of a PBNode.\n   * @exports IPBNode\n   * @interface IPBNode\n   * @property {Array.<IPBLink>|null} [Links] PBNode Links\n   * @property {Uint8Array|null} [Data] PBNode Data\n   */\n\n  /**\n   * Constructs a new PBNode.\n   * @exports PBNode\n   * @classdesc Represents a PBNode.\n   * @implements IPBNode\n   * @constructor\n   * @param {IPBNode=} [p] Properties to set\n   */\n  function PBNode(p) {\n    this.Links = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n\n  /**\n   * PBNode Links.\n   * @member {Array.<IPBLink>} Links\n   * @memberof PBNode\n   * @instance\n   */\n  PBNode.prototype.Links = $util.emptyArray;\n\n  /**\n   * PBNode Data.\n   * @member {Uint8Array} Data\n   * @memberof PBNode\n   * @instance\n   */\n  PBNode.prototype.Data = $util.newBuffer([]);\n\n  /**\n   * Encodes the specified PBNode message. Does not implicitly {@link PBNode.verify|verify} messages.\n   * @function encode\n   * @memberof PBNode\n   * @static\n   * @param {IPBNode} m PBNode message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PBNode.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\")) w.uint32(10).bytes(m.Data);\n    if (m.Links != null && m.Links.length) {\n      for (var i = 0; i < m.Links.length; ++i) $root.PBLink.encode(m.Links[i], w.uint32(18).fork()).ldelim();\n    }\n    return w;\n  };\n\n  /**\n   * Decodes a PBNode message from the specified reader or buffer.\n   * @function decode\n   * @memberof PBNode\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {PBNode} PBNode\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PBNode.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n      m = new $root.PBNode();\n    while (r.pos < c) {\n      var t = r.uint32();\n      switch (t >>> 3) {\n        case 2:\n          if (!(m.Links && m.Links.length)) m.Links = [];\n          m.Links.push($root.PBLink.decode(r, r.uint32()));\n          break;\n        case 1:\n          m.Data = r.bytes();\n          break;\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n    return m;\n  };\n\n  /**\n   * Creates a PBNode message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PBNode\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {PBNode} PBNode\n   */\n  PBNode.fromObject = function fromObject(d) {\n    if (d instanceof $root.PBNode) return d;\n    var m = new $root.PBNode();\n    if (d.Links) {\n      if (!Array.isArray(d.Links)) throw TypeError(\".PBNode.Links: array expected\");\n      m.Links = [];\n      for (var i = 0; i < d.Links.length; ++i) {\n        if (typeof d.Links[i] !== \"object\") throw TypeError(\".PBNode.Links: object expected\");\n        m.Links[i] = $root.PBLink.fromObject(d.Links[i]);\n      }\n    }\n    if (d.Data != null) {\n      if (typeof d.Data === \"string\") $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);else if (d.Data.length) m.Data = d.Data;\n    }\n    return m;\n  };\n\n  /**\n   * Creates a plain object from a PBNode message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PBNode\n   * @static\n   * @param {PBNode} m PBNode\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  PBNode.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n    if (o.arrays || o.defaults) {\n      d.Links = [];\n    }\n    if (o.defaults) {\n      if (o.bytes === String) d.Data = \"\";else {\n        d.Data = [];\n        if (o.bytes !== Array) d.Data = $util.newBuffer(d.Data);\n      }\n    }\n    if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n      d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n    }\n    if (m.Links && m.Links.length) {\n      d.Links = [];\n      for (var j = 0; j < m.Links.length; ++j) {\n        d.Links[j] = $root.PBLink.toObject(m.Links[j], o);\n      }\n    }\n    return d;\n  };\n\n  /**\n   * Converts this PBNode to JSON.\n   * @function toJSON\n   * @memberof PBNode\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  PBNode.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return PBNode;\n}();\nmodule.exports = $root;","map":{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","PBLink","p","ks","Object","keys","i","length","prototype","Hash","newBuffer","Name","Tsize","Long","fromBits","encode","m","w","create","hasOwnProperty","call","uint32","bytes","string","uint64","decode","r","l","c","undefined","len","pos","t","skipType","fromObject","d","base64","String","fromValue","unsigned","parseInt","LongBits","low","high","toNumber","toObject","o","defaults","Array","n","longs","toString","Number","slice","toJSON","constructor","toJSONOptions","PBNode","Links","emptyArray","Data","fork","ldelim","push","isArray","TypeError","arrays","j","module","exports"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipld-dag-pb/src/dag.js"],"sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.PBLink = (function() {\n\n    /**\n     * Properties of a PBLink.\n     * @exports IPBLink\n     * @interface IPBLink\n     * @property {Uint8Array|null} [Hash] PBLink Hash\n     * @property {string|null} [Name] PBLink Name\n     * @property {number|null} [Tsize] PBLink Tsize\n     */\n\n    /**\n     * Constructs a new PBLink.\n     * @exports PBLink\n     * @classdesc Represents a PBLink.\n     * @implements IPBLink\n     * @constructor\n     * @param {IPBLink=} [p] Properties to set\n     */\n    function PBLink(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * PBLink Hash.\n     * @member {Uint8Array} Hash\n     * @memberof PBLink\n     * @instance\n     */\n    PBLink.prototype.Hash = $util.newBuffer([]);\n\n    /**\n     * PBLink Name.\n     * @member {string} Name\n     * @memberof PBLink\n     * @instance\n     */\n    PBLink.prototype.Name = \"\";\n\n    /**\n     * PBLink Tsize.\n     * @member {number} Tsize\n     * @memberof PBLink\n     * @instance\n     */\n    PBLink.prototype.Tsize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Encodes the specified PBLink message. Does not implicitly {@link PBLink.verify|verify} messages.\n     * @function encode\n     * @memberof PBLink\n     * @static\n     * @param {IPBLink} m PBLink message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PBLink.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.Hash != null && Object.hasOwnProperty.call(m, \"Hash\"))\n            w.uint32(10).bytes(m.Hash);\n        if (m.Name != null && Object.hasOwnProperty.call(m, \"Name\"))\n            w.uint32(18).string(m.Name);\n        if (m.Tsize != null && Object.hasOwnProperty.call(m, \"Tsize\"))\n            w.uint32(24).uint64(m.Tsize);\n        return w;\n    };\n\n    /**\n     * Decodes a PBLink message from the specified reader or buffer.\n     * @function decode\n     * @memberof PBLink\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {PBLink} PBLink\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PBLink.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.PBLink();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Hash = r.bytes();\n                break;\n            case 2:\n                m.Name = r.string();\n                break;\n            case 3:\n                m.Tsize = r.uint64();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a PBLink message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PBLink\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {PBLink} PBLink\n     */\n    PBLink.fromObject = function fromObject(d) {\n        if (d instanceof $root.PBLink)\n            return d;\n        var m = new $root.PBLink();\n        if (d.Hash != null) {\n            if (typeof d.Hash === \"string\")\n                $util.base64.decode(d.Hash, m.Hash = $util.newBuffer($util.base64.length(d.Hash)), 0);\n            else if (d.Hash.length)\n                m.Hash = d.Hash;\n        }\n        if (d.Name != null) {\n            m.Name = String(d.Name);\n        }\n        if (d.Tsize != null) {\n            if ($util.Long)\n                (m.Tsize = $util.Long.fromValue(d.Tsize)).unsigned = true;\n            else if (typeof d.Tsize === \"string\")\n                m.Tsize = parseInt(d.Tsize, 10);\n            else if (typeof d.Tsize === \"number\")\n                m.Tsize = d.Tsize;\n            else if (typeof d.Tsize === \"object\")\n                m.Tsize = new $util.LongBits(d.Tsize.low >>> 0, d.Tsize.high >>> 0).toNumber(true);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a PBLink message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PBLink\n     * @static\n     * @param {PBLink} m PBLink\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PBLink.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.Hash = \"\";\n            else {\n                d.Hash = [];\n                if (o.bytes !== Array)\n                    d.Hash = $util.newBuffer(d.Hash);\n            }\n            d.Name = \"\";\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.Tsize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.Tsize = o.longs === String ? \"0\" : 0;\n        }\n        if (m.Hash != null && m.hasOwnProperty(\"Hash\")) {\n            d.Hash = o.bytes === String ? $util.base64.encode(m.Hash, 0, m.Hash.length) : o.bytes === Array ? Array.prototype.slice.call(m.Hash) : m.Hash;\n        }\n        if (m.Name != null && m.hasOwnProperty(\"Name\")) {\n            d.Name = m.Name;\n        }\n        if (m.Tsize != null && m.hasOwnProperty(\"Tsize\")) {\n            if (typeof m.Tsize === \"number\")\n                d.Tsize = o.longs === String ? String(m.Tsize) : m.Tsize;\n            else\n                d.Tsize = o.longs === String ? $util.Long.prototype.toString.call(m.Tsize) : o.longs === Number ? new $util.LongBits(m.Tsize.low >>> 0, m.Tsize.high >>> 0).toNumber(true) : m.Tsize;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this PBLink to JSON.\n     * @function toJSON\n     * @memberof PBLink\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PBLink.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PBLink;\n})();\n\n$root.PBNode = (function() {\n\n    /**\n     * Properties of a PBNode.\n     * @exports IPBNode\n     * @interface IPBNode\n     * @property {Array.<IPBLink>|null} [Links] PBNode Links\n     * @property {Uint8Array|null} [Data] PBNode Data\n     */\n\n    /**\n     * Constructs a new PBNode.\n     * @exports PBNode\n     * @classdesc Represents a PBNode.\n     * @implements IPBNode\n     * @constructor\n     * @param {IPBNode=} [p] Properties to set\n     */\n    function PBNode(p) {\n        this.Links = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * PBNode Links.\n     * @member {Array.<IPBLink>} Links\n     * @memberof PBNode\n     * @instance\n     */\n    PBNode.prototype.Links = $util.emptyArray;\n\n    /**\n     * PBNode Data.\n     * @member {Uint8Array} Data\n     * @memberof PBNode\n     * @instance\n     */\n    PBNode.prototype.Data = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified PBNode message. Does not implicitly {@link PBNode.verify|verify} messages.\n     * @function encode\n     * @memberof PBNode\n     * @static\n     * @param {IPBNode} m PBNode message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PBNode.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\"))\n            w.uint32(10).bytes(m.Data);\n        if (m.Links != null && m.Links.length) {\n            for (var i = 0; i < m.Links.length; ++i)\n                $root.PBLink.encode(m.Links[i], w.uint32(18).fork()).ldelim();\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a PBNode message from the specified reader or buffer.\n     * @function decode\n     * @memberof PBNode\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {PBNode} PBNode\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PBNode.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.PBNode();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 2:\n                if (!(m.Links && m.Links.length))\n                    m.Links = [];\n                m.Links.push($root.PBLink.decode(r, r.uint32()));\n                break;\n            case 1:\n                m.Data = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a PBNode message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PBNode\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {PBNode} PBNode\n     */\n    PBNode.fromObject = function fromObject(d) {\n        if (d instanceof $root.PBNode)\n            return d;\n        var m = new $root.PBNode();\n        if (d.Links) {\n            if (!Array.isArray(d.Links))\n                throw TypeError(\".PBNode.Links: array expected\");\n            m.Links = [];\n            for (var i = 0; i < d.Links.length; ++i) {\n                if (typeof d.Links[i] !== \"object\")\n                    throw TypeError(\".PBNode.Links: object expected\");\n                m.Links[i] = $root.PBLink.fromObject(d.Links[i]);\n            }\n        }\n        if (d.Data != null) {\n            if (typeof d.Data === \"string\")\n                $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);\n            else if (d.Data.length)\n                m.Data = d.Data;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a PBNode message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PBNode\n     * @static\n     * @param {PBNode} m PBNode\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PBNode.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.Links = [];\n        }\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.Data = \"\";\n            else {\n                d.Data = [];\n                if (o.bytes !== Array)\n                    d.Data = $util.newBuffer(d.Data);\n            }\n        }\n        if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n            d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n        }\n        if (m.Links && m.Links.length) {\n            d.Links = [];\n            for (var j = 0; j < m.Links.length; ++j) {\n                d.Links[j] = $root.PBLink.toObject(m.Links[j], o);\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this PBNode to JSON.\n     * @function toJSON\n     * @memberof PBNode\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PBNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PBNode;\n})();\n\nmodule.exports = $root;\n"],"mappings":"AAAA;AACA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAoB,CAAC;;AAE7C;AACA,IAAIC,OAAO,GAAGF,SAAS,CAACG,MAAM;EAAEC,OAAO,GAAGJ,SAAS,CAACK,MAAM;EAAEC,KAAK,GAAGN,SAAS,CAACO,IAAI;;AAElF;AACA,IAAIC,KAAK,GAAGR,SAAS,CAACS,KAAK,CAAC,SAAS,CAAC,KAAKT,SAAS,CAACS,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AAE3ED,KAAK,CAACE,MAAM,GAAI,YAAW;EAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,MAAMA,CAACC,CAAC,EAAE;IACf,IAAIA,CAAC,EACD,KAAK,IAAIC,EAAE,GAAGC,MAAM,CAACC,IAAI,CAACH,CAAC,CAAC,EAAEI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,EAAE,CAACI,MAAM,EAAE,EAAED,CAAC,EACnD,IAAIJ,CAAC,CAACC,EAAE,CAACG,CAAC,CAAC,CAAC,IAAI,IAAI,EAChB,IAAI,CAACH,EAAE,CAACG,CAAC,CAAC,CAAC,GAAGJ,CAAC,CAACC,EAAE,CAACG,CAAC,CAAC,CAAC;EACtC;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIL,MAAM,CAACO,SAAS,CAACC,IAAI,GAAGZ,KAAK,CAACa,SAAS,CAAC,EAAE,CAAC;;EAE3C;AACJ;AACA;AACA;AACA;AACA;EACIT,MAAM,CAACO,SAAS,CAACG,IAAI,GAAG,EAAE;;EAE1B;AACJ;AACA;AACA;AACA;AACA;EACIV,MAAM,CAACO,SAAS,CAACI,KAAK,GAAGf,KAAK,CAACgB,IAAI,GAAGhB,KAAK,CAACgB,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;EAEvE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIb,MAAM,CAACc,MAAM,GAAG,SAASA,MAAMA,CAACC,CAAC,EAAEC,CAAC,EAAE;IAClC,IAAI,CAACA,CAAC,EACFA,CAAC,GAAGtB,OAAO,CAACuB,MAAM,CAAC,CAAC;IACxB,IAAIF,CAAC,CAACP,IAAI,IAAI,IAAI,IAAIL,MAAM,CAACe,cAAc,CAACC,IAAI,CAACJ,CAAC,EAAE,MAAM,CAAC,EACvDC,CAAC,CAACI,MAAM,CAAC,EAAE,CAAC,CAACC,KAAK,CAACN,CAAC,CAACP,IAAI,CAAC;IAC9B,IAAIO,CAAC,CAACL,IAAI,IAAI,IAAI,IAAIP,MAAM,CAACe,cAAc,CAACC,IAAI,CAACJ,CAAC,EAAE,MAAM,CAAC,EACvDC,CAAC,CAACI,MAAM,CAAC,EAAE,CAAC,CAACE,MAAM,CAACP,CAAC,CAACL,IAAI,CAAC;IAC/B,IAAIK,CAAC,CAACJ,KAAK,IAAI,IAAI,IAAIR,MAAM,CAACe,cAAc,CAACC,IAAI,CAACJ,CAAC,EAAE,OAAO,CAAC,EACzDC,CAAC,CAACI,MAAM,CAAC,EAAE,CAAC,CAACG,MAAM,CAACR,CAAC,CAACJ,KAAK,CAAC;IAChC,OAAOK,CAAC;EACZ,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIhB,MAAM,CAACwB,MAAM,GAAG,SAASA,MAAMA,CAACC,CAAC,EAAEC,CAAC,EAAE;IAClC,IAAI,EAAED,CAAC,YAAYjC,OAAO,CAAC,EACvBiC,CAAC,GAAGjC,OAAO,CAACyB,MAAM,CAACQ,CAAC,CAAC;IACzB,IAAIE,CAAC,GAAGD,CAAC,KAAKE,SAAS,GAAGH,CAAC,CAACI,GAAG,GAAGJ,CAAC,CAACK,GAAG,GAAGJ,CAAC;MAAEX,CAAC,GAAG,IAAIjB,KAAK,CAACE,MAAM,CAAC,CAAC;IACnE,OAAOyB,CAAC,CAACK,GAAG,GAAGH,CAAC,EAAE;MACd,IAAII,CAAC,GAAGN,CAAC,CAACL,MAAM,CAAC,CAAC;MAClB,QAAQW,CAAC,KAAK,CAAC;QACf,KAAK,CAAC;UACFhB,CAAC,CAACP,IAAI,GAAGiB,CAAC,CAACJ,KAAK,CAAC,CAAC;UAClB;QACJ,KAAK,CAAC;UACFN,CAAC,CAACL,IAAI,GAAGe,CAAC,CAACH,MAAM,CAAC,CAAC;UACnB;QACJ,KAAK,CAAC;UACFP,CAAC,CAACJ,KAAK,GAAGc,CAAC,CAACF,MAAM,CAAC,CAAC;UACpB;QACJ;UACIE,CAAC,CAACO,QAAQ,CAACD,CAAC,GAAG,CAAC,CAAC;UACjB;MACJ;IACJ;IACA,OAAOhB,CAAC;EACZ,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIf,MAAM,CAACiC,UAAU,GAAG,SAASA,UAAUA,CAACC,CAAC,EAAE;IACvC,IAAIA,CAAC,YAAYpC,KAAK,CAACE,MAAM,EACzB,OAAOkC,CAAC;IACZ,IAAInB,CAAC,GAAG,IAAIjB,KAAK,CAACE,MAAM,CAAC,CAAC;IAC1B,IAAIkC,CAAC,CAAC1B,IAAI,IAAI,IAAI,EAAE;MAChB,IAAI,OAAO0B,CAAC,CAAC1B,IAAI,KAAK,QAAQ,EAC1BZ,KAAK,CAACuC,MAAM,CAACX,MAAM,CAACU,CAAC,CAAC1B,IAAI,EAAEO,CAAC,CAACP,IAAI,GAAGZ,KAAK,CAACa,SAAS,CAACb,KAAK,CAACuC,MAAM,CAAC7B,MAAM,CAAC4B,CAAC,CAAC1B,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KACrF,IAAI0B,CAAC,CAAC1B,IAAI,CAACF,MAAM,EAClBS,CAAC,CAACP,IAAI,GAAG0B,CAAC,CAAC1B,IAAI;IACvB;IACA,IAAI0B,CAAC,CAACxB,IAAI,IAAI,IAAI,EAAE;MAChBK,CAAC,CAACL,IAAI,GAAG0B,MAAM,CAACF,CAAC,CAACxB,IAAI,CAAC;IAC3B;IACA,IAAIwB,CAAC,CAACvB,KAAK,IAAI,IAAI,EAAE;MACjB,IAAIf,KAAK,CAACgB,IAAI,EACV,CAACG,CAAC,CAACJ,KAAK,GAAGf,KAAK,CAACgB,IAAI,CAACyB,SAAS,CAACH,CAAC,CAACvB,KAAK,CAAC,EAAE2B,QAAQ,GAAG,IAAI,CAAC,KACzD,IAAI,OAAOJ,CAAC,CAACvB,KAAK,KAAK,QAAQ,EAChCI,CAAC,CAACJ,KAAK,GAAG4B,QAAQ,CAACL,CAAC,CAACvB,KAAK,EAAE,EAAE,CAAC,CAAC,KAC/B,IAAI,OAAOuB,CAAC,CAACvB,KAAK,KAAK,QAAQ,EAChCI,CAAC,CAACJ,KAAK,GAAGuB,CAAC,CAACvB,KAAK,CAAC,KACjB,IAAI,OAAOuB,CAAC,CAACvB,KAAK,KAAK,QAAQ,EAChCI,CAAC,CAACJ,KAAK,GAAG,IAAIf,KAAK,CAAC4C,QAAQ,CAACN,CAAC,CAACvB,KAAK,CAAC8B,GAAG,KAAK,CAAC,EAAEP,CAAC,CAACvB,KAAK,CAAC+B,IAAI,KAAK,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAC;IAC1F;IACA,OAAO5B,CAAC;EACZ,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIf,MAAM,CAAC4C,QAAQ,GAAG,SAASA,QAAQA,CAAC7B,CAAC,EAAE8B,CAAC,EAAE;IACtC,IAAI,CAACA,CAAC,EACFA,CAAC,GAAG,CAAC,CAAC;IACV,IAAIX,CAAC,GAAG,CAAC,CAAC;IACV,IAAIW,CAAC,CAACC,QAAQ,EAAE;MACZ,IAAID,CAAC,CAACxB,KAAK,KAAKe,MAAM,EAClBF,CAAC,CAAC1B,IAAI,GAAG,EAAE,CAAC,KACX;QACD0B,CAAC,CAAC1B,IAAI,GAAG,EAAE;QACX,IAAIqC,CAAC,CAACxB,KAAK,KAAK0B,KAAK,EACjBb,CAAC,CAAC1B,IAAI,GAAGZ,KAAK,CAACa,SAAS,CAACyB,CAAC,CAAC1B,IAAI,CAAC;MACxC;MACA0B,CAAC,CAACxB,IAAI,GAAG,EAAE;MACX,IAAId,KAAK,CAACgB,IAAI,EAAE;QACZ,IAAIoC,CAAC,GAAG,IAAIpD,KAAK,CAACgB,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QAClCsB,CAAC,CAACvB,KAAK,GAAGkC,CAAC,CAACI,KAAK,KAAKb,MAAM,GAAGY,CAAC,CAACE,QAAQ,CAAC,CAAC,GAAGL,CAAC,CAACI,KAAK,KAAKE,MAAM,GAAGH,CAAC,CAACL,QAAQ,CAAC,CAAC,GAAGK,CAAC;MACvF,CAAC,MACGd,CAAC,CAACvB,KAAK,GAAGkC,CAAC,CAACI,KAAK,KAAKb,MAAM,GAAG,GAAG,GAAG,CAAC;IAC9C;IACA,IAAIrB,CAAC,CAACP,IAAI,IAAI,IAAI,IAAIO,CAAC,CAACG,cAAc,CAAC,MAAM,CAAC,EAAE;MAC5CgB,CAAC,CAAC1B,IAAI,GAAGqC,CAAC,CAACxB,KAAK,KAAKe,MAAM,GAAGxC,KAAK,CAACuC,MAAM,CAACrB,MAAM,CAACC,CAAC,CAACP,IAAI,EAAE,CAAC,EAAEO,CAAC,CAACP,IAAI,CAACF,MAAM,CAAC,GAAGuC,CAAC,CAACxB,KAAK,KAAK0B,KAAK,GAAGA,KAAK,CAACxC,SAAS,CAAC6C,KAAK,CAACjC,IAAI,CAACJ,CAAC,CAACP,IAAI,CAAC,GAAGO,CAAC,CAACP,IAAI;IACjJ;IACA,IAAIO,CAAC,CAACL,IAAI,IAAI,IAAI,IAAIK,CAAC,CAACG,cAAc,CAAC,MAAM,CAAC,EAAE;MAC5CgB,CAAC,CAACxB,IAAI,GAAGK,CAAC,CAACL,IAAI;IACnB;IACA,IAAIK,CAAC,CAACJ,KAAK,IAAI,IAAI,IAAII,CAAC,CAACG,cAAc,CAAC,OAAO,CAAC,EAAE;MAC9C,IAAI,OAAOH,CAAC,CAACJ,KAAK,KAAK,QAAQ,EAC3BuB,CAAC,CAACvB,KAAK,GAAGkC,CAAC,CAACI,KAAK,KAAKb,MAAM,GAAGA,MAAM,CAACrB,CAAC,CAACJ,KAAK,CAAC,GAAGI,CAAC,CAACJ,KAAK,CAAC,KAEzDuB,CAAC,CAACvB,KAAK,GAAGkC,CAAC,CAACI,KAAK,KAAKb,MAAM,GAAGxC,KAAK,CAACgB,IAAI,CAACL,SAAS,CAAC2C,QAAQ,CAAC/B,IAAI,CAACJ,CAAC,CAACJ,KAAK,CAAC,GAAGkC,CAAC,CAACI,KAAK,KAAKE,MAAM,GAAG,IAAIvD,KAAK,CAAC4C,QAAQ,CAACzB,CAAC,CAACJ,KAAK,CAAC8B,GAAG,KAAK,CAAC,EAAE1B,CAAC,CAACJ,KAAK,CAAC+B,IAAI,KAAK,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAC,GAAG5B,CAAC,CAACJ,KAAK;IAC5L;IACA,OAAOuB,CAAC;EACZ,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIlC,MAAM,CAACO,SAAS,CAAC8C,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IACxC,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;EACxE,CAAC;EAED,OAAOvD,MAAM;AACjB,CAAC,CAAE,CAAC;AAEJF,KAAK,CAAC0D,MAAM,GAAI,YAAW;EAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,MAAMA,CAACvD,CAAC,EAAE;IACf,IAAI,CAACwD,KAAK,GAAG,EAAE;IACf,IAAIxD,CAAC,EACD,KAAK,IAAIC,EAAE,GAAGC,MAAM,CAACC,IAAI,CAACH,CAAC,CAAC,EAAEI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,EAAE,CAACI,MAAM,EAAE,EAAED,CAAC,EACnD,IAAIJ,CAAC,CAACC,EAAE,CAACG,CAAC,CAAC,CAAC,IAAI,IAAI,EAChB,IAAI,CAACH,EAAE,CAACG,CAAC,CAAC,CAAC,GAAGJ,CAAC,CAACC,EAAE,CAACG,CAAC,CAAC,CAAC;EACtC;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACImD,MAAM,CAACjD,SAAS,CAACkD,KAAK,GAAG7D,KAAK,CAAC8D,UAAU;;EAEzC;AACJ;AACA;AACA;AACA;AACA;EACIF,MAAM,CAACjD,SAAS,CAACoD,IAAI,GAAG/D,KAAK,CAACa,SAAS,CAAC,EAAE,CAAC;;EAE3C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI+C,MAAM,CAAC1C,MAAM,GAAG,SAASA,MAAMA,CAACC,CAAC,EAAEC,CAAC,EAAE;IAClC,IAAI,CAACA,CAAC,EACFA,CAAC,GAAGtB,OAAO,CAACuB,MAAM,CAAC,CAAC;IACxB,IAAIF,CAAC,CAAC4C,IAAI,IAAI,IAAI,IAAIxD,MAAM,CAACe,cAAc,CAACC,IAAI,CAACJ,CAAC,EAAE,MAAM,CAAC,EACvDC,CAAC,CAACI,MAAM,CAAC,EAAE,CAAC,CAACC,KAAK,CAACN,CAAC,CAAC4C,IAAI,CAAC;IAC9B,IAAI5C,CAAC,CAAC0C,KAAK,IAAI,IAAI,IAAI1C,CAAC,CAAC0C,KAAK,CAACnD,MAAM,EAAE;MACnC,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,CAAC,CAAC0C,KAAK,CAACnD,MAAM,EAAE,EAAED,CAAC,EACnCP,KAAK,CAACE,MAAM,CAACc,MAAM,CAACC,CAAC,CAAC0C,KAAK,CAACpD,CAAC,CAAC,EAAEW,CAAC,CAACI,MAAM,CAAC,EAAE,CAAC,CAACwC,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;IACrE;IACA,OAAO7C,CAAC;EACZ,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIwC,MAAM,CAAChC,MAAM,GAAG,SAASA,MAAMA,CAACC,CAAC,EAAEC,CAAC,EAAE;IAClC,IAAI,EAAED,CAAC,YAAYjC,OAAO,CAAC,EACvBiC,CAAC,GAAGjC,OAAO,CAACyB,MAAM,CAACQ,CAAC,CAAC;IACzB,IAAIE,CAAC,GAAGD,CAAC,KAAKE,SAAS,GAAGH,CAAC,CAACI,GAAG,GAAGJ,CAAC,CAACK,GAAG,GAAGJ,CAAC;MAAEX,CAAC,GAAG,IAAIjB,KAAK,CAAC0D,MAAM,CAAC,CAAC;IACnE,OAAO/B,CAAC,CAACK,GAAG,GAAGH,CAAC,EAAE;MACd,IAAII,CAAC,GAAGN,CAAC,CAACL,MAAM,CAAC,CAAC;MAClB,QAAQW,CAAC,KAAK,CAAC;QACf,KAAK,CAAC;UACF,IAAI,EAAEhB,CAAC,CAAC0C,KAAK,IAAI1C,CAAC,CAAC0C,KAAK,CAACnD,MAAM,CAAC,EAC5BS,CAAC,CAAC0C,KAAK,GAAG,EAAE;UAChB1C,CAAC,CAAC0C,KAAK,CAACK,IAAI,CAAChE,KAAK,CAACE,MAAM,CAACwB,MAAM,CAACC,CAAC,EAAEA,CAAC,CAACL,MAAM,CAAC,CAAC,CAAC,CAAC;UAChD;QACJ,KAAK,CAAC;UACFL,CAAC,CAAC4C,IAAI,GAAGlC,CAAC,CAACJ,KAAK,CAAC,CAAC;UAClB;QACJ;UACII,CAAC,CAACO,QAAQ,CAACD,CAAC,GAAG,CAAC,CAAC;UACjB;MACJ;IACJ;IACA,OAAOhB,CAAC;EACZ,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIyC,MAAM,CAACvB,UAAU,GAAG,SAASA,UAAUA,CAACC,CAAC,EAAE;IACvC,IAAIA,CAAC,YAAYpC,KAAK,CAAC0D,MAAM,EACzB,OAAOtB,CAAC;IACZ,IAAInB,CAAC,GAAG,IAAIjB,KAAK,CAAC0D,MAAM,CAAC,CAAC;IAC1B,IAAItB,CAAC,CAACuB,KAAK,EAAE;MACT,IAAI,CAACV,KAAK,CAACgB,OAAO,CAAC7B,CAAC,CAACuB,KAAK,CAAC,EACvB,MAAMO,SAAS,CAAC,+BAA+B,CAAC;MACpDjD,CAAC,CAAC0C,KAAK,GAAG,EAAE;MACZ,KAAK,IAAIpD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6B,CAAC,CAACuB,KAAK,CAACnD,MAAM,EAAE,EAAED,CAAC,EAAE;QACrC,IAAI,OAAO6B,CAAC,CAACuB,KAAK,CAACpD,CAAC,CAAC,KAAK,QAAQ,EAC9B,MAAM2D,SAAS,CAAC,gCAAgC,CAAC;QACrDjD,CAAC,CAAC0C,KAAK,CAACpD,CAAC,CAAC,GAAGP,KAAK,CAACE,MAAM,CAACiC,UAAU,CAACC,CAAC,CAACuB,KAAK,CAACpD,CAAC,CAAC,CAAC;MACpD;IACJ;IACA,IAAI6B,CAAC,CAACyB,IAAI,IAAI,IAAI,EAAE;MAChB,IAAI,OAAOzB,CAAC,CAACyB,IAAI,KAAK,QAAQ,EAC1B/D,KAAK,CAACuC,MAAM,CAACX,MAAM,CAACU,CAAC,CAACyB,IAAI,EAAE5C,CAAC,CAAC4C,IAAI,GAAG/D,KAAK,CAACa,SAAS,CAACb,KAAK,CAACuC,MAAM,CAAC7B,MAAM,CAAC4B,CAAC,CAACyB,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KACrF,IAAIzB,CAAC,CAACyB,IAAI,CAACrD,MAAM,EAClBS,CAAC,CAAC4C,IAAI,GAAGzB,CAAC,CAACyB,IAAI;IACvB;IACA,OAAO5C,CAAC;EACZ,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIyC,MAAM,CAACZ,QAAQ,GAAG,SAASA,QAAQA,CAAC7B,CAAC,EAAE8B,CAAC,EAAE;IACtC,IAAI,CAACA,CAAC,EACFA,CAAC,GAAG,CAAC,CAAC;IACV,IAAIX,CAAC,GAAG,CAAC,CAAC;IACV,IAAIW,CAAC,CAACoB,MAAM,IAAIpB,CAAC,CAACC,QAAQ,EAAE;MACxBZ,CAAC,CAACuB,KAAK,GAAG,EAAE;IAChB;IACA,IAAIZ,CAAC,CAACC,QAAQ,EAAE;MACZ,IAAID,CAAC,CAACxB,KAAK,KAAKe,MAAM,EAClBF,CAAC,CAACyB,IAAI,GAAG,EAAE,CAAC,KACX;QACDzB,CAAC,CAACyB,IAAI,GAAG,EAAE;QACX,IAAId,CAAC,CAACxB,KAAK,KAAK0B,KAAK,EACjBb,CAAC,CAACyB,IAAI,GAAG/D,KAAK,CAACa,SAAS,CAACyB,CAAC,CAACyB,IAAI,CAAC;MACxC;IACJ;IACA,IAAI5C,CAAC,CAAC4C,IAAI,IAAI,IAAI,IAAI5C,CAAC,CAACG,cAAc,CAAC,MAAM,CAAC,EAAE;MAC5CgB,CAAC,CAACyB,IAAI,GAAGd,CAAC,CAACxB,KAAK,KAAKe,MAAM,GAAGxC,KAAK,CAACuC,MAAM,CAACrB,MAAM,CAACC,CAAC,CAAC4C,IAAI,EAAE,CAAC,EAAE5C,CAAC,CAAC4C,IAAI,CAACrD,MAAM,CAAC,GAAGuC,CAAC,CAACxB,KAAK,KAAK0B,KAAK,GAAGA,KAAK,CAACxC,SAAS,CAAC6C,KAAK,CAACjC,IAAI,CAACJ,CAAC,CAAC4C,IAAI,CAAC,GAAG5C,CAAC,CAAC4C,IAAI;IACjJ;IACA,IAAI5C,CAAC,CAAC0C,KAAK,IAAI1C,CAAC,CAAC0C,KAAK,CAACnD,MAAM,EAAE;MAC3B4B,CAAC,CAACuB,KAAK,GAAG,EAAE;MACZ,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnD,CAAC,CAAC0C,KAAK,CAACnD,MAAM,EAAE,EAAE4D,CAAC,EAAE;QACrChC,CAAC,CAACuB,KAAK,CAACS,CAAC,CAAC,GAAGpE,KAAK,CAACE,MAAM,CAAC4C,QAAQ,CAAC7B,CAAC,CAAC0C,KAAK,CAACS,CAAC,CAAC,EAAErB,CAAC,CAAC;MACrD;IACJ;IACA,OAAOX,CAAC;EACZ,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIsB,MAAM,CAACjD,SAAS,CAAC8C,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IACxC,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;EACxE,CAAC;EAED,OAAOC,MAAM;AACjB,CAAC,CAAE,CAAC;AAEJW,MAAM,CAACC,OAAO,GAAGtE,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}