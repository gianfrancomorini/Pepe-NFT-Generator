{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst multicodec = require('multicodec');\nconst multihashing = require('multihashing-async');\nconst {\n  multihash\n} = multihashing;\nconst codec = multicodec.DAG_PB;\nconst defaultHashAlg = multihash.names['sha2-256'];\n\n/**\n * @typedef {object} GenCIDOptions - Options to create the CID\n * @property {CID.CIDVersion} [cidVersion=1] - CID version number\n * @property {multihashing.multihash.HashCode} [hashAlg=multihash.names['sha2-256']] - Defaults to the defaultHashAlg of the format\n */\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n * @param {GenCIDOptions} [userOptions] - Options to create the CID\n */\nconst cid = async (binaryBlob, userOptions = {}) => {\n  const options = {\n    cidVersion: userOptions.cidVersion == null ? 1 : userOptions.cidVersion,\n    hashAlg: userOptions.hashAlg == null ? defaultHashAlg : userOptions.hashAlg\n  };\n  const hashName = multihash.codes[options.hashAlg];\n  const hash = await multihashing(binaryBlob, hashName);\n  const codecName = multicodec.getNameFromCode(codec);\n  const cid = new CID(options.cidVersion, codecName, hash);\n  return cid;\n};\nmodule.exports = {\n  codec,\n  defaultHashAlg,\n  cid\n};","map":{"version":3,"names":["CID","require","multicodec","multihashing","multihash","codec","DAG_PB","defaultHashAlg","names","cid","binaryBlob","userOptions","options","cidVersion","hashAlg","hashName","codes","hash","codecName","getNameFromCode","module","exports"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipld-dag-pb/src/genCid.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\nconst { multihash } = multihashing\n\nconst codec = multicodec.DAG_PB\nconst defaultHashAlg = multihash.names['sha2-256']\n\n/**\n * @typedef {object} GenCIDOptions - Options to create the CID\n * @property {CID.CIDVersion} [cidVersion=1] - CID version number\n * @property {multihashing.multihash.HashCode} [hashAlg=multihash.names['sha2-256']] - Defaults to the defaultHashAlg of the format\n */\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n * @param {GenCIDOptions} [userOptions] - Options to create the CID\n */\nconst cid = async (binaryBlob, userOptions = {}) => {\n  const options = {\n    cidVersion: userOptions.cidVersion == null ? 1 : userOptions.cidVersion,\n    hashAlg: userOptions.hashAlg == null ? defaultHashAlg : userOptions.hashAlg\n  }\n\n  const hashName = multihash.codes[options.hashAlg]\n  const hash = await multihashing(binaryBlob, hashName)\n  const codecName = multicodec.getNameFromCode(codec)\n  const cid = new CID(options.cidVersion, codecName, hash)\n\n  return cid\n}\n\nmodule.exports = {\n  codec,\n  defaultHashAlg,\n  cid\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAY,CAAC;AACxC,MAAME,YAAY,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAClD,MAAM;EAAEG;AAAU,CAAC,GAAGD,YAAY;AAElC,MAAME,KAAK,GAAGH,UAAU,CAACI,MAAM;AAC/B,MAAMC,cAAc,GAAGH,SAAS,CAACI,KAAK,CAAC,UAAU,CAAC;;AAElD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,GAAG,GAAG,MAAAA,CAAOC,UAAU,EAAEC,WAAW,GAAG,CAAC,CAAC,KAAK;EAClD,MAAMC,OAAO,GAAG;IACdC,UAAU,EAAEF,WAAW,CAACE,UAAU,IAAI,IAAI,GAAG,CAAC,GAAGF,WAAW,CAACE,UAAU;IACvEC,OAAO,EAAEH,WAAW,CAACG,OAAO,IAAI,IAAI,GAAGP,cAAc,GAAGI,WAAW,CAACG;EACtE,CAAC;EAED,MAAMC,QAAQ,GAAGX,SAAS,CAACY,KAAK,CAACJ,OAAO,CAACE,OAAO,CAAC;EACjD,MAAMG,IAAI,GAAG,MAAMd,YAAY,CAACO,UAAU,EAAEK,QAAQ,CAAC;EACrD,MAAMG,SAAS,GAAGhB,UAAU,CAACiB,eAAe,CAACd,KAAK,CAAC;EACnD,MAAMI,GAAG,GAAG,IAAIT,GAAG,CAACY,OAAO,CAACC,UAAU,EAAEK,SAAS,EAAED,IAAI,CAAC;EAExD,OAAOR,GAAG;AACZ,CAAC;AAEDW,MAAM,CAACC,OAAO,GAAG;EACfhB,KAAK;EACLE,cAAc;EACdE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}