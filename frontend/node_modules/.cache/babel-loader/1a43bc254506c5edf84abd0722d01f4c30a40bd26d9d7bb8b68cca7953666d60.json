{"ast":null,"code":"'use strict';\n\n/* eslint-env browser */\nconst CID = require('cids');\nconst {\n  multiaddr\n} = require('multiaddr');\nconst multibase = require('multibase');\nconst multicodec = require('multicodec');\nconst multihash = require('multihashes');\nconst globSource = require('ipfs-utils/src/files/glob-source');\nconst urlSource = require('ipfs-utils/src/files/url-source');\n\n/**\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').Options} Options\n */\n\n/**\n * @param {Options} options\n */\nfunction create(options = {}) {\n  /** @type {import('ipfs-core-types').IPFS & { getEndpointConfig: () => EndpointConfig }} */\n  const client = {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    isOnline: require('./is-online')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    start: require('./start')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options)\n  };\n  return client;\n}\nmodule.exports = {\n  create,\n  CID,\n  multiaddr,\n  multibase,\n  multicodec,\n  multihash,\n  globSource,\n  urlSource\n};","map":{"version":3,"names":["CID","require","multiaddr","multibase","multicodec","multihash","globSource","urlSource","create","options","client","add","addAll","bitswap","block","bootstrap","cat","commands","config","dag","dht","diag","dns","files","get","getEndpointConfig","id","isOnline","key","log","ls","mount","name","object","pin","ping","pubsub","refs","repo","resolve","start","stats","stop","swarm","version","module","exports"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/index.js"],"sourcesContent":["'use strict'\n/* eslint-env browser */\n\nconst CID = require('cids')\nconst { multiaddr } = require('multiaddr')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst multihash = require('multihashes')\nconst globSource = require('ipfs-utils/src/files/glob-source')\nconst urlSource = require('ipfs-utils/src/files/url-source')\n\n/**\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').Options} Options\n */\n\n/**\n * @param {Options} options\n */\nfunction create (options = {}) {\n  /** @type {import('ipfs-core-types').IPFS & { getEndpointConfig: () => EndpointConfig }} */\n  const client = {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    isOnline: require('./is-online')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    start: require('./start')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options)\n  }\n\n  return client\n}\n\nmodule.exports = {\n  create,\n  CID,\n  multiaddr,\n  multibase,\n  multicodec,\n  multihash,\n  globSource,\n  urlSource\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}