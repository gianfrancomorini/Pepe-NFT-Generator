{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst {\n  Multiaddr\n} = require('multiaddr');\nconst toCamel = require('../lib/object-to-camel');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  async function* provide(cids, options = {\n    recursive: false\n  }) {\n    cids = Array.isArray(cids) ? cids : [cids];\n    const res = await api.post('dht/provide', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cids.map(cid => new CID(cid).toString()),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (let message of res.ndjson()) {\n      message = toCamel(message);\n      message.id = new CID(message.id);\n      if (message.responses) {\n        message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */{\n          ID,\n          Addrs\n        }) => ({\n          id: ID,\n          addrs: (Addrs || []).map((/** @type {string} **/a) => new Multiaddr(a))\n        }));\n      } else {\n        message.responses = [];\n      }\n      yield message;\n    }\n  }\n  return provide;\n});","map":{"version":3,"names":["CID","require","Multiaddr","toCamel","configure","toUrlSearchParams","module","exports","api","provide","cids","options","recursive","Array","isArray","res","post","timeout","signal","searchParams","arg","map","cid","toString","headers","message","ndjson","id","responses","ID","Addrs","addrs","a"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/dht/provide.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  async function * provide (cids, options = { recursive: false }) {\n    cids = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cids.map(cid => new CID(cid).toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.id = new CID(message.id)\n      if (message.responses) {\n        message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n        }))\n      } else {\n        message.responses = []\n      }\n      yield message\n    }\n  }\n\n  return provide\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAM;EAAEC;AAAU,CAAC,GAAGD,OAAO,CAAC,WAAW,CAAC;AAC1C,MAAME,OAAO,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AACjD,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAK,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,OAAOA,CAAEC,IAAI,EAAEC,OAAO,GAAG;IAAEC,SAAS,EAAE;EAAM,CAAC,EAAE;IAC9DF,IAAI,GAAGG,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;IAE1C,MAAMK,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,aAAa,EAAE;MACxCC,OAAO,EAAEN,OAAO,CAACM,OAAO;MACxBC,MAAM,EAAEP,OAAO,CAACO,MAAM;MACtBC,YAAY,EAAEd,iBAAiB,CAAC;QAC9Be,GAAG,EAAEV,IAAI,CAACW,GAAG,CAACC,GAAG,IAAI,IAAItB,GAAG,CAACsB,GAAG,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC;QAC7C,GAAGZ;MACL,CAAC,CAAC;MACFa,OAAO,EAAEb,OAAO,CAACa;IACnB,CAAC,CAAC;IAEF,WAAW,IAAIC,OAAO,IAAIV,GAAG,CAACW,MAAM,CAAC,CAAC,EAAE;MACtCD,OAAO,GAAGtB,OAAO,CAACsB,OAAO,CAAC;MAC1BA,OAAO,CAACE,EAAE,GAAG,IAAI3B,GAAG,CAACyB,OAAO,CAACE,EAAE,CAAC;MAChC,IAAIF,OAAO,CAACG,SAAS,EAAE;QACrBH,OAAO,CAACG,SAAS,GAAGH,OAAO,CAACG,SAAS,CAACP,GAAG,CAAC,CAAC,8CAA+C;UAAEQ,EAAE;UAAEC;QAAM,CAAC,MAAM;UAC3GH,EAAE,EAAEE,EAAE;UACNE,KAAK,EAAE,CAACD,KAAK,IAAI,EAAE,EAAET,GAAG,CAAC,CAAC,sBAAuBW,CAAC,KAAK,IAAI9B,SAAS,CAAC8B,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;MACL,CAAC,MAAM;QACLP,OAAO,CAACG,SAAS,GAAG,EAAE;MACxB;MACA,MAAMH,OAAO;IACf;EACF;EAEA,OAAOhB,OAAO;AAChB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}