{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\n/**\n * Link represents an IPFS Merkle DAG Link between Nodes.\n */\nclass DAGLink {\n  /**\n   * @param {string | undefined | null} name\n   * @param {number} size\n   * @param {CID | string | Uint8Array} cid\n   */\n  constructor(name, size, cid) {\n    if (!cid) {\n      throw new Error('A link requires a cid to point to');\n    }\n\n    // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n    this.Name = name || '';\n    this.Tsize = size;\n    this.Hash = new CID(cid);\n    Object.defineProperties(this, {\n      _nameBuf: {\n        value: null,\n        writable: true,\n        enumerable: false\n      }\n    });\n  }\n  toString() {\n    return `DAGLink <${this.Hash.toBaseEncodedString()} - name: \"${this.Name}\", size: ${this.Tsize}>`;\n  }\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.Name,\n        size: this.Tsize,\n        cid: this.Hash.toBaseEncodedString()\n      });\n    }\n    return Object.assign({}, this._json);\n  }\n\n  // Memoize the Uint8Array representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new Uint8Arrays every time\n  get nameAsBuffer() {\n    if (this._nameBuf != null) {\n      return this._nameBuf;\n    }\n    this._nameBuf = uint8ArrayFromString(this.Name);\n    return this._nameBuf;\n  }\n}\nmodule.exports = DAGLink;","map":{"version":3,"names":["CID","require","uint8ArrayFromString","DAGLink","constructor","name","size","cid","Error","Name","Tsize","Hash","Object","defineProperties","_nameBuf","value","writable","enumerable","toString","toBaseEncodedString","toJSON","_json","freeze","assign","nameAsBuffer","module","exports"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipld-dag-pb/src/dag-link/dagLink.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\n/**\n * Link represents an IPFS Merkle DAG Link between Nodes.\n */\nclass DAGLink {\n  /**\n   * @param {string | undefined | null} name\n   * @param {number} size\n   * @param {CID | string | Uint8Array} cid\n   */\n  constructor (name, size, cid) {\n    if (!cid) {\n      throw new Error('A link requires a cid to point to')\n    }\n\n    // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n    this.Name = name || ''\n    this.Tsize = size\n    this.Hash = new CID(cid)\n\n    Object.defineProperties(this, {\n      _nameBuf: { value: null, writable: true, enumerable: false }\n    })\n  }\n\n  toString () {\n    return `DAGLink <${this.Hash.toBaseEncodedString()} - name: \"${this.Name}\", size: ${this.Tsize}>`\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.Name,\n        size: this.Tsize,\n        cid: this.Hash.toBaseEncodedString()\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  // Memoize the Uint8Array representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new Uint8Arrays every time\n  get nameAsBuffer () {\n    if (this._nameBuf != null) {\n      return this._nameBuf\n    }\n\n    this._nameBuf = uint8ArrayFromString(this.Name)\n    return this._nameBuf\n  }\n}\n\nmodule.exports = DAGLink\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,yBAAyB,CAAC;;AAE/D;AACA;AACA;AACA,MAAME,OAAO,CAAC;EACZ;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAE;IAC5B,IAAI,CAACA,GAAG,EAAE;MACR,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;IACtD;;IAEA;IACA;IACA;IACA,IAAI,CAACC,IAAI,GAAGJ,IAAI,IAAI,EAAE;IACtB,IAAI,CAACK,KAAK,GAAGJ,IAAI;IACjB,IAAI,CAACK,IAAI,GAAG,IAAIX,GAAG,CAACO,GAAG,CAAC;IAExBK,MAAM,CAACC,gBAAgB,CAAC,IAAI,EAAE;MAC5BC,QAAQ,EAAE;QAAEC,KAAK,EAAE,IAAI;QAAEC,QAAQ,EAAE,IAAI;QAAEC,UAAU,EAAE;MAAM;IAC7D,CAAC,CAAC;EACJ;EAEAC,QAAQA,CAAA,EAAI;IACV,OAAO,YAAY,IAAI,CAACP,IAAI,CAACQ,mBAAmB,CAAC,CAAC,aAAa,IAAI,CAACV,IAAI,YAAY,IAAI,CAACC,KAAK,GAAG;EACnG;EAEAU,MAAMA,CAAA,EAAI;IACR,IAAI,CAAC,IAAI,CAACC,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,GAAGT,MAAM,CAACU,MAAM,CAAC;QACzBjB,IAAI,EAAE,IAAI,CAACI,IAAI;QACfH,IAAI,EAAE,IAAI,CAACI,KAAK;QAChBH,GAAG,EAAE,IAAI,CAACI,IAAI,CAACQ,mBAAmB,CAAC;MACrC,CAAC,CAAC;IACJ;IAEA,OAAOP,MAAM,CAACW,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACF,KAAK,CAAC;EACtC;;EAEA;EACA;EACA;EACA,IAAIG,YAAYA,CAAA,EAAI;IAClB,IAAI,IAAI,CAACV,QAAQ,IAAI,IAAI,EAAE;MACzB,OAAO,IAAI,CAACA,QAAQ;IACtB;IAEA,IAAI,CAACA,QAAQ,GAAGZ,oBAAoB,CAAC,IAAI,CAACO,IAAI,CAAC;IAC/C,OAAO,IAAI,CAACK,QAAQ;EACtB;AACF;AAEAW,MAAM,CAACC,OAAO,GAAGvB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}