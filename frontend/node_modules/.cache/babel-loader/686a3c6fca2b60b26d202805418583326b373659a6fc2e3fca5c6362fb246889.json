{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst {\n  Multiaddr\n} = require('multiaddr');\nconst toCamel = require('../lib/object-to-camel');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst multipartRequest = require('../lib/multipart-request');\nconst abortSignal = require('../lib/abort-signal');\nconst {\n  AbortController\n} = require('native-abort-controller');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function* put(key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('dht/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      ...(await multipartRequest(value, controller, options.headers))\n    });\n    for await (let message of res.ndjson()) {\n      message = toCamel(message);\n      message.id = new CID(message.id);\n      if (message.responses) {\n        message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */{\n          ID,\n          Addrs\n        }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => new Multiaddr(a))\n        }));\n      }\n      yield message;\n    }\n  }\n  return put;\n});","map":{"version":3,"names":["CID","require","Multiaddr","toCamel","configure","toUrlSearchParams","multipartRequest","abortSignal","AbortController","module","exports","api","put","key","value","options","controller","signal","res","post","timeout","searchParams","arg","headers","message","ndjson","id","responses","map","ID","Addrs","addrs","a"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/dht/put.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('dht/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      ...(\n        await multipartRequest(value, controller, options.headers)\n      )\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.id = new CID(message.id)\n      if (message.responses) {\n        message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => new Multiaddr(a))\n        }))\n      }\n      yield message\n    }\n  }\n\n  return put\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAM;EAAEC;AAAU,CAAC,GAAGD,OAAO,CAAC,WAAW,CAAC;AAC1C,MAAME,OAAO,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AACjD,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,0BAA0B,CAAC;AAC5D,MAAMM,WAAW,GAAGN,OAAO,CAAC,qBAAqB,CAAC;AAClD,MAAM;EAAEO;AAAgB,CAAC,GAAGP,OAAO,CAAC,yBAAyB,CAAC;;AAE9D;AACA;AACA;AACA;;AAEAQ,MAAM,CAACC,OAAO,GAAGN,SAAS,CAACO,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,GAAGA,CAAEC,GAAG,EAAEC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC9C;IACA,MAAMC,UAAU,GAAG,IAAIR,eAAe,CAAC,CAAC;IACxC,MAAMS,MAAM,GAAGV,WAAW,CAACS,UAAU,CAACC,MAAM,EAAEF,OAAO,CAACE,MAAM,CAAC;;IAE7D;IACA,MAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,SAAS,EAAE;MACpCC,OAAO,EAAEL,OAAO,CAACK,OAAO;MACxBH,MAAM;MACNI,YAAY,EAAEhB,iBAAiB,CAAC;QAC9BiB,GAAG,EAAET,GAAG;QACR,GAAGE;MACL,CAAC,CAAC;MACF,IACE,MAAMT,gBAAgB,CAACQ,KAAK,EAAEE,UAAU,EAAED,OAAO,CAACQ,OAAO,CAAC;IAE9D,CAAC,CAAC;IAEF,WAAW,IAAIC,OAAO,IAAIN,GAAG,CAACO,MAAM,CAAC,CAAC,EAAE;MACtCD,OAAO,GAAGrB,OAAO,CAACqB,OAAO,CAAC;MAC1BA,OAAO,CAACE,EAAE,GAAG,IAAI1B,GAAG,CAACwB,OAAO,CAACE,EAAE,CAAC;MAChC,IAAIF,OAAO,CAACG,SAAS,EAAE;QACrBH,OAAO,CAACG,SAAS,GAAGH,OAAO,CAACG,SAAS,CAACC,GAAG,CAAC,CAAC,8CAA+C;UAAEC,EAAE;UAAEC;QAAM,CAAC,MAAM;UAC3GJ,EAAE,EAAEG,EAAE;UACNE,KAAK,EAAE,CAACD,KAAK,IAAI,EAAE,EAAEF,GAAG,CAACI,CAAC,IAAI,IAAI9B,SAAS,CAAC8B,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;MACL;MACA,MAAMR,OAAO;IACf;EACF;EAEA,OAAOZ,GAAG;AACZ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}