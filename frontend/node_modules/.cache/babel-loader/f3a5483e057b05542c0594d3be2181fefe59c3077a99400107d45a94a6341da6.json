{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst {\n  DAGNode,\n  DAGLink\n} = require('ipld-dag-pb');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get(cid, options = {}) {\n    const res = await api.post('object/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return new DAGNode(uint8ArrayFromString(data.Data, 'base64pad'), (data.Links || []).map((/** @type {any} */l) => new DAGLink(l.Name, l.Size, l.Hash)));\n  }\n  return get;\n});","map":{"version":3,"names":["CID","require","DAGNode","DAGLink","configure","toUrlSearchParams","uint8ArrayFromString","module","exports","api","get","cid","options","res","post","timeout","signal","searchParams","arg","Uint8Array","dataEncoding","headers","data","json","Data","Links","map","l","Name","Size","Hash"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/object/get.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { DAGNode, DAGLink } = require('ipld-dag-pb')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return new DAGNode(\n      uint8ArrayFromString(data.Data, 'base64pad'),\n      (data.Links || []).map((/** @type {any} */ l) => new DAGLink(l.Name, l.Size, l.Hash))\n    )\n  }\n  return get\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAM;EAAEC,OAAO;EAAEC;AAAQ,CAAC,GAAGF,OAAO,CAAC,aAAa,CAAC;AACnD,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAMK,oBAAoB,GAAGL,OAAO,CAAC,yBAAyB,CAAC;;AAE/D;AACA;AACA;AACA;;AAEAM,MAAM,CAACC,OAAO,GAAGJ,SAAS,CAACK,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,GAAGA,CAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACrC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,YAAY,EAAE;MACvCC,OAAO,EAAEH,OAAO,CAACG,OAAO;MACxBC,MAAM,EAAEJ,OAAO,CAACI,MAAM;MACtBC,YAAY,EAAEZ,iBAAiB,CAAC;QAC9Ba,GAAG,EAAE,GAAGP,GAAG,YAAYQ,UAAU,GAAG,IAAInB,GAAG,CAACW,GAAG,CAAC,GAAGA,GAAG,EAAE;QACxDS,YAAY,EAAE,QAAQ;QACtB,GAAGR;MACL,CAAC,CAAC;MACFS,OAAO,EAAET,OAAO,CAACS;IACnB,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,CAAC;IAE7B,OAAO,IAAIrB,OAAO,CAChBI,oBAAoB,CAACgB,IAAI,CAACE,IAAI,EAAE,WAAW,CAAC,EAC5C,CAACF,IAAI,CAACG,KAAK,IAAI,EAAE,EAAEC,GAAG,CAAC,CAAC,kBAAmBC,CAAC,KAAK,IAAIxB,OAAO,CAACwB,CAAC,CAACC,IAAI,EAAED,CAAC,CAACE,IAAI,EAAEF,CAAC,CAACG,IAAI,CAAC,CACtF,CAAC;EACH;EACA,OAAOpB,GAAG;AACZ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}