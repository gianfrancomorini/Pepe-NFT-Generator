{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function* ls(path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.ls requires a path');\n    }\n    const res = await api.post('files/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.isCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result));\n      }\n    }\n  }\n  return ls;\n});\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = new CID(entry.hash);\n  }\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"names":["CID","require","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","ls","path","options","Error","res","post","timeout","signal","searchParams","arg","isCID","long","stream","headers","result","ndjson","entry","Entries","toCoreInterface","hash","cid","type"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/files/ls.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.isCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = new CID(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,sCAAsC,CAAC;AAC3E,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;AACAI,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,EAAEA,CAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACvC,IAAI,CAACD,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MACrC,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;IAClD;IAEA,MAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,UAAU,EAAE;MACrCC,OAAO,EAAEJ,OAAO,CAACI,OAAO;MACxBC,MAAM,EAAEL,OAAO,CAACK,MAAM;MACtBC,YAAY,EAAEZ,iBAAiB,CAAC;QAC9Ba,GAAG,EAAEjB,GAAG,CAACkB,KAAK,CAACT,IAAI,CAAC,GAAG,SAASA,IAAI,EAAE,GAAGA,IAAI;QAC7C;QACAU,IAAI,EAAE,IAAI;QACV,GAAGT,OAAO;QACVU,MAAM,EAAE;MACV,CAAC,CAAC;MACFC,OAAO,EAAEX,OAAO,CAACW;IACnB,CAAC,CAAC;IAEF,WAAW,MAAMC,MAAM,IAAIV,GAAG,CAACW,MAAM,CAAC,CAAC,EAAE;MACvC;MACA,IAAI,SAAS,IAAID,MAAM,EAAE;QACvB,KAAK,MAAME,KAAK,IAAIF,MAAM,CAACG,OAAO,IAAI,EAAE,EAAE;UACxC,MAAMC,eAAe,CAACxB,mBAAmB,CAACsB,KAAK,CAAC,CAAC;QACnD;MACF,CAAC,MAAM;QACL,MAAME,eAAe,CAACxB,mBAAmB,CAACoB,MAAM,CAAC,CAAC;MACpD;IACF;EACF;EACA,OAAOd,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASkB,eAAeA,CAAEF,KAAK,EAAE;EAC/B,IAAIA,KAAK,CAACG,IAAI,EAAE;IACdH,KAAK,CAACI,GAAG,GAAG,IAAI5B,GAAG,CAACwB,KAAK,CAACG,IAAI,CAAC;EACjC;EAEA,OAAOH,KAAK,CAACG,IAAI;EAEjBH,KAAK,CAACK,IAAI,GAAGL,KAAK,CAACK,IAAI,KAAK,CAAC,GAAG,WAAW,GAAG,MAAM;EAEpD,OAAOL,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}