{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  async function cp(sources, destination, options = {}) {\n    if (!Array.isArray(sources)) {\n      sources = [sources];\n    }\n    const res = await api.post('files/cp', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.concat(destination).map(src => CID.isCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    });\n    await res.text();\n  }\n  return cp;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","cp","sources","destination","options","Array","isArray","res","post","timeout","signal","searchParams","arg","concat","map","src","isCID","headers","text"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/files/cp.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  async function cp (sources, destination, options = {}) {\n    if (!Array.isArray(sources)) {\n      sources = [sources]\n    }\n\n    const res = await api.post('files/cp', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.concat(destination).map(src => CID.isCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return cp\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,EAAEA,CAAEC,OAAO,EAAEC,WAAW,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACrD,IAAI,CAACC,KAAK,CAACC,OAAO,CAACJ,OAAO,CAAC,EAAE;MAC3BA,OAAO,GAAG,CAACA,OAAO,CAAC;IACrB;IAEA,MAAMK,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,UAAU,EAAE;MACrCC,OAAO,EAAEL,OAAO,CAACK,OAAO;MACxBC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EAAEd,iBAAiB,CAAC;QAC9Be,GAAG,EAAEV,OAAO,CAACW,MAAM,CAACV,WAAW,CAAC,CAACW,GAAG,CAACC,GAAG,IAAIrB,GAAG,CAACsB,KAAK,CAACD,GAAG,CAAC,GAAG,SAASA,GAAG,EAAE,GAAGA,GAAG,CAAC;QAClF,GAAGX;MACL,CAAC,CAAC;MACFa,OAAO,EAAEb,OAAO,CAACa;IACnB,CAAC,CAAC;IAEF,MAAMV,GAAG,CAACW,IAAI,CAAC,CAAC;EAClB;EACA,OAAOjB,EAAE;AACX,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}