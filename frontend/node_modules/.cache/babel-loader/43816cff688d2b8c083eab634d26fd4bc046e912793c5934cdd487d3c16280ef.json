{"ast":null,"code":"'use strict';\n\n// @ts-ignore no types\nconst Tar = require('it-tar');\nconst CID = require('cids');\nconst configure = require('./lib/configure');\nconst toUrlSearchParams = require('./lib/to-url-search-params');\nconst map = require('it-map');\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  async function* get(path, options = {}) {\n    const res = await api.post('get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${path instanceof Uint8Array ? new CID(path) : path}`,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const extractor = Tar.extract();\n    for await (const {\n      header,\n      body\n    } of extractor(res.iterator())) {\n      if (header.type === 'directory') {\n        // @ts-ignore - Missing the following properties from type 'Directory':\n        // cid, name, size, depthts\n        yield {\n          type: 'dir',\n          path: header.name\n        };\n      } else {\n        // @ts-ignore - Missing the following properties from type 'File':\n        // cid, name, size, depthts\n        yield {\n          type: 'file',\n          path: header.name,\n          content: map(body, chunk => chunk.slice()) // convert bl to Buffer/Uint8Array\n        };\n      }\n    }\n  }\n  return get;\n});","map":{"version":3,"names":["Tar","require","CID","configure","toUrlSearchParams","map","module","exports","api","get","path","options","res","post","timeout","signal","searchParams","arg","Uint8Array","headers","extractor","extract","header","body","iterator","type","name","content","chunk","slice"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/get.js"],"sourcesContent":["'use strict'\n\n// @ts-ignore no types\nconst Tar = require('it-tar')\nconst CID = require('cids')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst map = require('it-map')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  async function * get (path, options = {}) {\n    const res = await api.post('get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${path instanceof Uint8Array ? new CID(path) : path}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const extractor = Tar.extract()\n\n    for await (const { header, body } of extractor(res.iterator())) {\n      if (header.type === 'directory') {\n        // @ts-ignore - Missing the following properties from type 'Directory':\n        // cid, name, size, depthts\n        yield {\n          type: 'dir',\n          path: header.name\n        }\n      } else {\n        // @ts-ignore - Missing the following properties from type 'File':\n        // cid, name, size, depthts\n        yield {\n          type: 'file',\n          path: header.name,\n          content: map(body, (chunk) => chunk.slice()) // convert bl to Buffer/Uint8Array\n        }\n      }\n    }\n  }\n\n  return get\n})\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC7B,MAAMC,GAAG,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAME,SAAS,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAC5C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,4BAA4B,CAAC;AAC/D,MAAMI,GAAG,GAAGJ,OAAO,CAAC,QAAQ,CAAC;;AAE7B;AACA;AACA;AACA;;AAEAK,MAAM,CAACC,OAAO,GAAGJ,SAAS,CAACK,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,GAAGA,CAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,KAAK,EAAE;MAChCC,OAAO,EAAEH,OAAO,CAACG,OAAO;MACxBC,MAAM,EAAEJ,OAAO,CAACI,MAAM;MACtBC,YAAY,EAAEZ,iBAAiB,CAAC;QAC9Ba,GAAG,EAAE,GAAGP,IAAI,YAAYQ,UAAU,GAAG,IAAIhB,GAAG,CAACQ,IAAI,CAAC,GAAGA,IAAI,EAAE;QAC3D,GAAGC;MACL,CAAC,CAAC;MACFQ,OAAO,EAAER,OAAO,CAACQ;IACnB,CAAC,CAAC;IAEF,MAAMC,SAAS,GAAGpB,GAAG,CAACqB,OAAO,CAAC,CAAC;IAE/B,WAAW,MAAM;MAAEC,MAAM;MAAEC;IAAK,CAAC,IAAIH,SAAS,CAACR,GAAG,CAACY,QAAQ,CAAC,CAAC,CAAC,EAAE;MAC9D,IAAIF,MAAM,CAACG,IAAI,KAAK,WAAW,EAAE;QAC/B;QACA;QACA,MAAM;UACJA,IAAI,EAAE,KAAK;UACXf,IAAI,EAAEY,MAAM,CAACI;QACf,CAAC;MACH,CAAC,MAAM;QACL;QACA;QACA,MAAM;UACJD,IAAI,EAAE,MAAM;UACZf,IAAI,EAAEY,MAAM,CAACI,IAAI;UACjBC,OAAO,EAAEtB,GAAG,CAACkB,IAAI,EAAGK,KAAK,IAAKA,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC;MACH;IACF;EACF;EAEA,OAAOpB,GAAG;AACZ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}