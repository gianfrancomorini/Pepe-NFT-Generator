{"ast":null,"code":"const BufferList = require('bl/BufferList');\nconst Reader = require('it-reader');\nmodule.exports = function LteReader(source) {\n  const reader = Reader(source);\n  let overflow;\n  const lteReader = {\n    [Symbol.asyncIterator]: () => lteReader,\n    async next(bytes) {\n      if (overflow) {\n        let value;\n        if (bytes == null || overflow.length === bytes) {\n          value = overflow;\n          overflow = null;\n        } else if (overflow.length > bytes) {\n          value = overflow.shallowSlice(0, bytes);\n          overflow = overflow.shallowSlice(bytes);\n        } else if (overflow.length < bytes) {\n          const {\n            value: nextValue,\n            done\n          } = await reader.next(bytes - overflow.length);\n          if (done) {\n            throw Object.assign(new Error(`stream ended before ${bytes - overflow.length} bytes became available`), {\n              code: 'ERR_UNDER_READ'\n            });\n          }\n          value = new BufferList([overflow, nextValue]);\n          overflow = null;\n        }\n        return {\n          value\n        };\n      }\n      return reader.next(bytes);\n    },\n    async nextLte(bytes) {\n      let {\n        done,\n        value\n      } = await lteReader.next();\n      if (done) return {\n        done\n      };\n      if (value.length <= bytes) return {\n        value\n      };\n      value = BufferList.isBufferList(value) ? value : new BufferList(value);\n      if (overflow) {\n        overflow.append(value.shallowSlice(bytes));\n      } else {\n        overflow = value.shallowSlice(bytes);\n      }\n      return {\n        value: value.shallowSlice(0, bytes)\n      };\n    },\n    return() {\n      return reader.return();\n    }\n  };\n  return lteReader;\n};","map":{"version":3,"names":["BufferList","require","Reader","module","exports","LteReader","source","reader","overflow","lteReader","Symbol","asyncIterator","next","bytes","value","length","shallowSlice","nextValue","done","Object","assign","Error","code","nextLte","isBufferList","append","return"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/it-tar/lte-reader.js"],"sourcesContent":["const BufferList = require('bl/BufferList')\nconst Reader = require('it-reader')\n\nmodule.exports = function LteReader (source) {\n  const reader = Reader(source)\n  let overflow\n  const lteReader = {\n    [Symbol.asyncIterator]: () => lteReader,\n    async next (bytes) {\n      if (overflow) {\n        let value\n        if (bytes == null || overflow.length === bytes) {\n          value = overflow\n          overflow = null\n        } else if (overflow.length > bytes) {\n          value = overflow.shallowSlice(0, bytes)\n          overflow = overflow.shallowSlice(bytes)\n        } else if (overflow.length < bytes) {\n          const { value: nextValue, done } = await reader.next(bytes - overflow.length)\n          if (done) {\n            throw Object.assign(\n              new Error(`stream ended before ${bytes - overflow.length} bytes became available`),\n              { code: 'ERR_UNDER_READ' }\n            )\n          }\n          value = new BufferList([overflow, nextValue])\n          overflow = null\n        }\n        return { value }\n      }\n      return reader.next(bytes)\n    },\n    async nextLte (bytes) {\n      let { done, value } = await lteReader.next()\n      if (done) return { done }\n      if (value.length <= bytes) return { value }\n      value = BufferList.isBufferList(value) ? value : new BufferList(value)\n      if (overflow) {\n        overflow.append(value.shallowSlice(bytes))\n      } else {\n        overflow = value.shallowSlice(bytes)\n      }\n      return { value: value.shallowSlice(0, bytes) }\n    },\n    return () {\n      return reader.return()\n    }\n  }\n  return lteReader\n}\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAW,CAAC;AAEnCE,MAAM,CAACC,OAAO,GAAG,SAASC,SAASA,CAAEC,MAAM,EAAE;EAC3C,MAAMC,MAAM,GAAGL,MAAM,CAACI,MAAM,CAAC;EAC7B,IAAIE,QAAQ;EACZ,MAAMC,SAAS,GAAG;IAChB,CAACC,MAAM,CAACC,aAAa,GAAG,MAAMF,SAAS;IACvC,MAAMG,IAAIA,CAAEC,KAAK,EAAE;MACjB,IAAIL,QAAQ,EAAE;QACZ,IAAIM,KAAK;QACT,IAAID,KAAK,IAAI,IAAI,IAAIL,QAAQ,CAACO,MAAM,KAAKF,KAAK,EAAE;UAC9CC,KAAK,GAAGN,QAAQ;UAChBA,QAAQ,GAAG,IAAI;QACjB,CAAC,MAAM,IAAIA,QAAQ,CAACO,MAAM,GAAGF,KAAK,EAAE;UAClCC,KAAK,GAAGN,QAAQ,CAACQ,YAAY,CAAC,CAAC,EAAEH,KAAK,CAAC;UACvCL,QAAQ,GAAGA,QAAQ,CAACQ,YAAY,CAACH,KAAK,CAAC;QACzC,CAAC,MAAM,IAAIL,QAAQ,CAACO,MAAM,GAAGF,KAAK,EAAE;UAClC,MAAM;YAAEC,KAAK,EAAEG,SAAS;YAAEC;UAAK,CAAC,GAAG,MAAMX,MAAM,CAACK,IAAI,CAACC,KAAK,GAAGL,QAAQ,CAACO,MAAM,CAAC;UAC7E,IAAIG,IAAI,EAAE;YACR,MAAMC,MAAM,CAACC,MAAM,CACjB,IAAIC,KAAK,CAAC,uBAAuBR,KAAK,GAAGL,QAAQ,CAACO,MAAM,yBAAyB,CAAC,EAClF;cAAEO,IAAI,EAAE;YAAiB,CAC3B,CAAC;UACH;UACAR,KAAK,GAAG,IAAId,UAAU,CAAC,CAACQ,QAAQ,EAAES,SAAS,CAAC,CAAC;UAC7CT,QAAQ,GAAG,IAAI;QACjB;QACA,OAAO;UAAEM;QAAM,CAAC;MAClB;MACA,OAAOP,MAAM,CAACK,IAAI,CAACC,KAAK,CAAC;IAC3B,CAAC;IACD,MAAMU,OAAOA,CAAEV,KAAK,EAAE;MACpB,IAAI;QAAEK,IAAI;QAAEJ;MAAM,CAAC,GAAG,MAAML,SAAS,CAACG,IAAI,CAAC,CAAC;MAC5C,IAAIM,IAAI,EAAE,OAAO;QAAEA;MAAK,CAAC;MACzB,IAAIJ,KAAK,CAACC,MAAM,IAAIF,KAAK,EAAE,OAAO;QAAEC;MAAM,CAAC;MAC3CA,KAAK,GAAGd,UAAU,CAACwB,YAAY,CAACV,KAAK,CAAC,GAAGA,KAAK,GAAG,IAAId,UAAU,CAACc,KAAK,CAAC;MACtE,IAAIN,QAAQ,EAAE;QACZA,QAAQ,CAACiB,MAAM,CAACX,KAAK,CAACE,YAAY,CAACH,KAAK,CAAC,CAAC;MAC5C,CAAC,MAAM;QACLL,QAAQ,GAAGM,KAAK,CAACE,YAAY,CAACH,KAAK,CAAC;MACtC;MACA,OAAO;QAAEC,KAAK,EAAEA,KAAK,CAACE,YAAY,CAAC,CAAC,EAAEH,KAAK;MAAE,CAAC;IAChD,CAAC;IACDa,MAAMA,CAAA,EAAI;MACR,OAAOnB,MAAM,CAACmB,MAAM,CAAC,CAAC;IACxB;EACF,CAAC;EACD,OAAOjB,SAAS;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}