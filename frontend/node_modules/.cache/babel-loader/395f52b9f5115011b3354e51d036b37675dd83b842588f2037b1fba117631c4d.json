{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst configure = require('../../lib/configure');\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"rmLink\"]}\n   */\n  async function rmLink(cid, dLink, options = {}) {\n    const res = await api.post('object/patch/rm-link', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [`${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        // @ts-ignore loose types\n        dLink.Name || dLink.name || null],\n        ...options\n      }),\n      headers: options.headers\n    });\n    const {\n      Hash\n    } = await res.json();\n    return new CID(Hash);\n  }\n  return rmLink;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","rmLink","cid","dLink","options","res","post","timeout","signal","searchParams","arg","Uint8Array","Name","name","headers","Hash","json"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/object/patch/rm-link.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../../lib/configure')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"rmLink\"]}\n   */\n  async function rmLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/rm-link', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n          // @ts-ignore loose types\n          dLink.Name || dLink.name || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return new CID(Hash)\n  }\n  return rmLink\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAME,iBAAiB,GAAGF,OAAO,CAAC,gCAAgC,CAAC;;AAEnE;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,MAAMA,CAAEC,GAAG,EAAEC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC/C,MAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,sBAAsB,EAAE;MACjDC,OAAO,EAAEH,OAAO,CAACG,OAAO;MACxBC,MAAM,EAAEJ,OAAO,CAACI,MAAM;MACtBC,YAAY,EAAEZ,iBAAiB,CAAC;QAC9Ba,GAAG,EAAE,CACH,GAAGR,GAAG,YAAYS,UAAU,GAAG,IAAIjB,GAAG,CAACQ,GAAG,CAAC,GAAGA,GAAG,EAAE;QACnD;QACAC,KAAK,CAACS,IAAI,IAAIT,KAAK,CAACU,IAAI,IAAI,IAAI,CACjC;QACD,GAAGT;MACL,CAAC,CAAC;MACFU,OAAO,EAAEV,OAAO,CAACU;IACnB,CAAC,CAAC;IAEF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAC,CAAC;IAEjC,OAAO,IAAItB,GAAG,CAACqB,IAAI,CAAC;EACtB;EACA,OAAOd,MAAM;AACf,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}