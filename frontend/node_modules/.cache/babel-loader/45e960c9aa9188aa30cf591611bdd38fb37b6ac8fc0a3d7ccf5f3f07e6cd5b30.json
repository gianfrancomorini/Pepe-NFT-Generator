{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst multihashing = require('multihashing-async');\nconst {\n  multihash\n} = multihashing;\nconst multicodec = require('multicodec');\n\n/**\n * @typedef {import('cids').CIDVersion} CIDVersion\n * @typedef {import('multihashing-async').multihash.HashCode} HashCode\n * @typedef {import('interface-ipld-format').Format<Uint8Array>} RawFormat\n */\n\n/**\n * Binary resolver\n *\n * @type {RawFormat}\n */\nmodule.exports = {\n  codec: multicodec.RAW,\n  defaultHashAlg: multihash.names['sha2-256'],\n  resolver: {\n    /**\n     * Resolves a path within a Raw block.\n     *\n     * Always returns the raw data as value without any remainderPath.\n     *\n     * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n     * @param {string} [path='/'] - Path that should be resolved.  Must be '/' or an exception is thrown\n     */\n    resolve: (binaryBlob, path) => {\n      if (path !== '/') {\n        throw new Error('Only the root path / may be resolved');\n      }\n      return {\n        value: binaryBlob,\n        remainderPath: ''\n      };\n    },\n    /**\n     * Return all available paths of a block.\n     *\n     * @generator\n     * @param {Uint8Array} binaryBlob - The raw data\n     */\n    async *tree(binaryBlob) {}\n  },\n  util: {\n    /**\n     * @param {Uint8Array} data\n     */\n    deserialize: data => {\n      return data;\n    },\n    /**\n     * @param {Uint8Array} data\n     */\n    serialize: data => {\n      return data;\n    },\n    /**\n     * Calculate the CID of the binary blob.\n     *\n     * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n     * @param {Object} [userOptions] - Options to create the CID\n     * @param {CIDVersion} [userOptions.cidVersion=1] - CID version number\n     * @param {HashCode} [userOptions.hashAlg=multihash.names['sha2-256']] - Defaults to the defaultHashAlg of the format\n     */\n    cid: async (binaryBlob, userOptions = {}) => {\n      const options = {\n        cidVersion: userOptions.cidVersion == null ? 1 : userOptions.cidVersion,\n        hashAlg: userOptions.hashAlg == null ? module.exports.defaultHashAlg : userOptions.hashAlg\n      };\n      const hashName = multihash.codes[options.hashAlg];\n      const hash = await multihashing(binaryBlob, hashName);\n      const codecName = multicodec.getNameFromCode(module.exports.codec);\n      const cid = new CID(options.cidVersion, codecName, hash);\n      return cid;\n    }\n  }\n};","map":{"version":3,"names":["CID","require","multihashing","multihash","multicodec","module","exports","codec","RAW","defaultHashAlg","names","resolver","resolve","binaryBlob","path","Error","value","remainderPath","tree","util","deserialize","data","serialize","cid","userOptions","options","cidVersion","hashAlg","hashName","codes","hash","codecName","getNameFromCode"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipld-raw/src/index.js"],"sourcesContent":["'use strict'\nconst CID = require('cids')\nconst multihashing = require('multihashing-async')\nconst { multihash } = multihashing\nconst multicodec = require('multicodec')\n\n/**\n * @typedef {import('cids').CIDVersion} CIDVersion\n * @typedef {import('multihashing-async').multihash.HashCode} HashCode\n * @typedef {import('interface-ipld-format').Format<Uint8Array>} RawFormat\n */\n\n/**\n * Binary resolver\n *\n * @type {RawFormat}\n */\nmodule.exports = {\n  codec: multicodec.RAW,\n  defaultHashAlg: multihash.names['sha2-256'],\n  resolver: {\n    /**\n     * Resolves a path within a Raw block.\n     *\n     * Always returns the raw data as value without any remainderPath.\n     *\n     * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n     * @param {string} [path='/'] - Path that should be resolved.  Must be '/' or an exception is thrown\n     */\n    resolve: (binaryBlob, path) => {\n      if (path !== '/') {\n        throw new Error('Only the root path / may be resolved')\n      }\n\n      return {\n        value: binaryBlob,\n        remainderPath: ''\n      }\n    },\n    /**\n     * Return all available paths of a block.\n     *\n     * @generator\n     * @param {Uint8Array} binaryBlob - The raw data\n     */\n    async * tree (binaryBlob) {\n\n    }\n  },\n  util: {\n    /**\n     * @param {Uint8Array} data\n     */\n    deserialize: (data) => {\n      return data\n    },\n    /**\n     * @param {Uint8Array} data\n     */\n    serialize: (data) => {\n      return data\n    },\n    /**\n     * Calculate the CID of the binary blob.\n     *\n     * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n     * @param {Object} [userOptions] - Options to create the CID\n     * @param {CIDVersion} [userOptions.cidVersion=1] - CID version number\n     * @param {HashCode} [userOptions.hashAlg=multihash.names['sha2-256']] - Defaults to the defaultHashAlg of the format\n     */\n    cid: async (binaryBlob, userOptions = {}) => {\n      const options = {\n        cidVersion: userOptions.cidVersion == null ? 1 : userOptions.cidVersion,\n        hashAlg: userOptions.hashAlg == null ? module.exports.defaultHashAlg : userOptions.hashAlg\n      }\n\n      const hashName = multihash.codes[options.hashAlg]\n      const hash = await multihashing(binaryBlob, hashName)\n      const codecName = multicodec.getNameFromCode(module.exports.codec)\n      const cid = new CID(options.cidVersion, codecName, hash)\n\n      return cid\n    }\n  }\n}\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,YAAY,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAClD,MAAM;EAAEE;AAAU,CAAC,GAAGD,YAAY;AAClC,MAAME,UAAU,GAAGH,OAAO,CAAC,YAAY,CAAC;;AAExC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACAI,MAAM,CAACC,OAAO,GAAG;EACfC,KAAK,EAAEH,UAAU,CAACI,GAAG;EACrBC,cAAc,EAAEN,SAAS,CAACO,KAAK,CAAC,UAAU,CAAC;EAC3CC,QAAQ,EAAE;IACR;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,OAAO,EAAEA,CAACC,UAAU,EAAEC,IAAI,KAAK;MAC7B,IAAIA,IAAI,KAAK,GAAG,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;MACzD;MAEA,OAAO;QACLC,KAAK,EAAEH,UAAU;QACjBI,aAAa,EAAE;MACjB,CAAC;IACH,CAAC;IACD;AACJ;AACA;AACA;AACA;AACA;IACI,OAAQC,IAAIA,CAAEL,UAAU,EAAE,CAE1B;EACF,CAAC;EACDM,IAAI,EAAE;IACJ;AACJ;AACA;IACIC,WAAW,EAAGC,IAAI,IAAK;MACrB,OAAOA,IAAI;IACb,CAAC;IACD;AACJ;AACA;IACIC,SAAS,EAAGD,IAAI,IAAK;MACnB,OAAOA,IAAI;IACb,CAAC;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACIE,GAAG,EAAE,MAAAA,CAAOV,UAAU,EAAEW,WAAW,GAAG,CAAC,CAAC,KAAK;MAC3C,MAAMC,OAAO,GAAG;QACdC,UAAU,EAAEF,WAAW,CAACE,UAAU,IAAI,IAAI,GAAG,CAAC,GAAGF,WAAW,CAACE,UAAU;QACvEC,OAAO,EAAEH,WAAW,CAACG,OAAO,IAAI,IAAI,GAAGtB,MAAM,CAACC,OAAO,CAACG,cAAc,GAAGe,WAAW,CAACG;MACrF,CAAC;MAED,MAAMC,QAAQ,GAAGzB,SAAS,CAAC0B,KAAK,CAACJ,OAAO,CAACE,OAAO,CAAC;MACjD,MAAMG,IAAI,GAAG,MAAM5B,YAAY,CAACW,UAAU,EAAEe,QAAQ,CAAC;MACrD,MAAMG,SAAS,GAAG3B,UAAU,CAAC4B,eAAe,CAAC3B,MAAM,CAACC,OAAO,CAACC,KAAK,CAAC;MAClE,MAAMgB,GAAG,GAAG,IAAIvB,GAAG,CAACyB,OAAO,CAACC,UAAU,EAAEK,SAAS,EAAED,IAAI,CAAC;MAExD,OAAOP,GAAG;IACZ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}