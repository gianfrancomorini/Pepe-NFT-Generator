{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst configure = require('../lib/configure');\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  async function* addAll(source, options = {}) {\n    for await (const {\n      path,\n      recursive,\n      metadata\n    } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      });\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          // non-streaming response\n          for (const cid of pin.Pins) {\n            yield new CID(cid);\n          }\n          continue;\n        }\n        yield new CID(pin);\n      }\n    }\n  }\n  return addAll;\n});","map":{"version":3,"names":["CID","require","configure","normaliseInput","toUrlSearchParams","module","exports","api","addAll","source","options","path","recursive","metadata","res","post","timeout","signal","searchParams","arg","JSON","stringify","undefined","stream","headers","pin","ndjson","Pins","cid"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/pin/add-all.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    for await (const { path, recursive, metadata } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          for (const cid of pin.Pins) {\n            yield new CID(cid)\n          }\n          continue\n        }\n\n        yield new CID(pin)\n      }\n    }\n  }\n  return addAll\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,cAAc,GAAGF,OAAO,CAAC,0CAA0C,CAAC;AAC1E,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGJ,SAAS,CAACK,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,MAAMA,CAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC7C,WAAW,MAAM;MAAEC,IAAI;MAAEC,SAAS;MAAEC;IAAS,CAAC,IAAIV,cAAc,CAACM,MAAM,CAAC,EAAE;MACxE,MAAMK,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,SAAS,EAAE;QACpCC,OAAO,EAAEN,OAAO,CAACM,OAAO;QACxBC,MAAM,EAAEP,OAAO,CAACO,MAAM;QACtBC,YAAY,EAAEd,iBAAiB,CAAC;UAC9B,GAAGM,OAAO;UACVS,GAAG,EAAER,IAAI;UACTC,SAAS;UACTC,QAAQ,EAAEA,QAAQ,GAAGO,IAAI,CAACC,SAAS,CAACR,QAAQ,CAAC,GAAGS,SAAS;UACzDC,MAAM,EAAE;QACV,CAAC,CAAC;QACFC,OAAO,EAAEd,OAAO,CAACc;MACnB,CAAC,CAAC;MAEF,WAAW,MAAMC,GAAG,IAAIX,GAAG,CAACY,MAAM,CAAC,CAAC,EAAE;QACpC,IAAID,GAAG,CAACE,IAAI,EAAE;UAAE;UACd,KAAK,MAAMC,GAAG,IAAIH,GAAG,CAACE,IAAI,EAAE;YAC1B,MAAM,IAAI3B,GAAG,CAAC4B,GAAG,CAAC;UACpB;UACA;QACF;QAEA,MAAM,IAAI5B,GAAG,CAACyB,GAAG,CAAC;MACpB;IACF;EACF;EACA,OAAOjB,MAAM;AACf,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}