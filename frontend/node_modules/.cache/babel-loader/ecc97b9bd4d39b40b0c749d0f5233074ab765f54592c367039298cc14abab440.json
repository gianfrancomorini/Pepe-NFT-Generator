{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst toCamel = require('../lib/object-to-camel');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function* (args, options = {}) {\n    if (!Array.isArray(args)) {\n      args = [args];\n    }\n    const res = await api.post('refs', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: args.map(arg => `${arg instanceof Uint8Array ? new CID(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: toCamel\n    });\n    yield* res.ndjson();\n  };\n  return Object.assign(refs, {\n    local: require('./local')(opts)\n  });\n});","map":{"version":3,"names":["CID","require","toCamel","configure","toUrlSearchParams","module","exports","api","opts","refs","args","options","Array","isArray","res","post","timeout","signal","searchParams","arg","map","Uint8Array","headers","transform","ndjson","Object","assign","local"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/refs/index.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function * (args, options = {}) {\n    if (!Array.isArray(args)) {\n      args = [args]\n    }\n\n    const res = await api.post('refs', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: args.map(arg => `${arg instanceof Uint8Array ? new CID(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: toCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: require('./local')(opts)\n  })\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,OAAO,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACjD,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGH,SAAS,CAAC,CAACI,GAAG,EAAEC,IAAI,KAAK;EACxC;AACF;AACA;EACE,MAAMC,IAAI,GAAG,gBAAAA,CAAkBC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjD,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;MACxBA,IAAI,GAAG,CAACA,IAAI,CAAC;IACf;IAEA,MAAMI,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,MAAM,EAAE;MACjCC,OAAO,EAAEL,OAAO,CAACK,OAAO;MACxBC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EAAEd,iBAAiB,CAAC;QAC9Be,GAAG,EAAET,IAAI,CAACU,GAAG,CAACD,GAAG,IAAI,GAAGA,GAAG,YAAYE,UAAU,GAAG,IAAIrB,GAAG,CAACmB,GAAG,CAAC,GAAGA,GAAG,EAAE,CAAC;QACzE,GAAGR;MACL,CAAC,CAAC;MACFW,OAAO,EAAEX,OAAO,CAACW,OAAO;MACxBC,SAAS,EAAErB;IACb,CAAC,CAAC;IAEF,OAAQY,GAAG,CAACU,MAAM,CAAC,CAAC;EACtB,CAAC;EAED,OAAOC,MAAM,CAACC,MAAM,CAACjB,IAAI,EAAE;IACzBkB,KAAK,EAAE1B,OAAO,CAAC,SAAS,CAAC,CAACO,IAAI;EAChC,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}