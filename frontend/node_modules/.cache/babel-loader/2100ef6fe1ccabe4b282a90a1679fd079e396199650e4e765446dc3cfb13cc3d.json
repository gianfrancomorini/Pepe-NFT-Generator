{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst {\n  DAGNode\n} = require('ipld-dag-pb');\nconst multipartRequest = require('../lib/multipart-request');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst abortSignal = require('../lib/abort-signal');\nconst {\n  AbortController\n} = require('native-abort-controller');\nconst uint8ArrayToString = require('uint8arrays/to-string');\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"put\"]}\n   */\n  async function put(obj, options = {}) {\n    let tmpObj = {\n      /** @type {string | undefined} */\n      Data: undefined,\n      /** @type {{ Name: string, Hash: string, Size: number }[]} */\n      Links: []\n    };\n    if (obj instanceof Uint8Array) {\n      if (!options.enc) {\n        tmpObj = {\n          // FIXME: this will corrupt data for byte values over 127\n          Data: uint8ArrayToString(obj),\n          Links: []\n        };\n      }\n    } else if (obj instanceof DAGNode) {\n      tmpObj = {\n        // FIXME: this will corrupt data for byte values over 127\n        Data: uint8ArrayToString(obj.Data),\n        Links: obj.Links.map(l => ({\n          Name: l.Name,\n          Hash: l.Hash.toString(),\n          Size: l.Tsize\n        }))\n      };\n    } else if (typeof obj === 'object') {\n      // FIXME: this will corrupt data for for byte values over 127\n      if (obj.Data) {\n        tmpObj.Data = uint8ArrayToString(obj.Data);\n      }\n      if (obj.Links) {\n        // @ts-ignore Size is Tsize\n        tmpObj.Links = obj.Links;\n      }\n    } else {\n      throw new Error('obj not recognized');\n    }\n    let buf;\n    if (obj instanceof Uint8Array && options.enc) {\n      buf = obj;\n    } else {\n      options.enc = 'json';\n      buf = uint8ArrayFromString(JSON.stringify(tmpObj));\n    }\n\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('object/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(await multipartRequest(buf, controller, options.headers))\n    });\n    const {\n      Hash\n    } = await res.json();\n    return new CID(Hash);\n  }\n  return put;\n});","map":{"version":3,"names":["CID","require","DAGNode","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","uint8ArrayToString","uint8ArrayFromString","module","exports","api","put","obj","options","tmpObj","Data","undefined","Links","Uint8Array","enc","map","l","Name","Hash","toString","Size","Tsize","Error","buf","JSON","stringify","controller","signal","res","post","timeout","searchParams","headers","json"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/object/put.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { DAGNode } = require('ipld-dag-pb')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"put\"]}\n   */\n  async function put (obj, options = {}) {\n    let tmpObj = {\n      /** @type {string | undefined} */\n      Data: undefined,\n      /** @type {{ Name: string, Hash: string, Size: number }[]} */\n      Links: []\n    }\n\n    if (obj instanceof Uint8Array) {\n      if (!options.enc) {\n        tmpObj = {\n          // FIXME: this will corrupt data for byte values over 127\n          Data: uint8ArrayToString(obj),\n          Links: []\n        }\n      }\n    } else if (obj instanceof DAGNode) {\n      tmpObj = {\n        // FIXME: this will corrupt data for byte values over 127\n        Data: uint8ArrayToString(obj.Data),\n        Links: obj.Links.map(l => ({\n          Name: l.Name,\n          Hash: l.Hash.toString(),\n          Size: l.Tsize\n        }))\n      }\n    } else if (typeof obj === 'object') {\n      // FIXME: this will corrupt data for for byte values over 127\n      if (obj.Data) {\n        tmpObj.Data = uint8ArrayToString(obj.Data)\n      }\n\n      if (obj.Links) {\n        // @ts-ignore Size is Tsize\n        tmpObj.Links = obj.Links\n      }\n    } else {\n      throw new Error('obj not recognized')\n    }\n\n    let buf\n    if (obj instanceof Uint8Array && options.enc) {\n      buf = obj\n    } else {\n      options.enc = 'json'\n      buf = uint8ArrayFromString(JSON.stringify(tmpObj))\n    }\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('object/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(buf, controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return new CID(Hash)\n  }\n  return put\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}