{"ast":null,"code":"'use strict';\n\nconst {\n  PBNode\n} = require('./dag');\nconst DAGLink = require('./dag-link/dagLink');\nconst DAGNode = require('./dag-node/dagNode');\nconst {\n  serializeDAGNode,\n  serializeDAGNodeLike\n} = require('./serialize');\nconst genCid = require('./genCid');\n\n/**\n * @typedef {import('./types').DAGLinkLike} DAGLinkLike\n */\n\n/**\n * Calculate the CID of the binary blob\n *\n * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n * @param {import('./genCid').GenCIDOptions} [userOptions] - Options to create the CID\n */\nconst cid = (binaryBlob, userOptions) => {\n  return genCid.cid(binaryBlob, userOptions);\n};\n\n/**\n * Serialize internal representation into a binary PB block\n *\n * @param {DAGNode | { Data?: Uint8Array, Links?: (DAGLink | DAGLinkLike)[]}} node\n */\nconst serialize = node => {\n  if (node instanceof DAGNode) {\n    return serializeDAGNode(node);\n  } else {\n    return serializeDAGNodeLike(node.Data, node.Links);\n  }\n};\n\n/**\n * Deserialize PB block into the internal representation.\n *\n * @param {Uint8Array} buffer - Binary representation of a PB block\n */\nconst deserialize = buffer => {\n  const message = PBNode.decode(buffer);\n  const pbn = PBNode.toObject(message, {\n    defaults: false,\n    arrays: true,\n    longs: Number,\n    objects: false\n  });\n\n  /** @type {DAGLink[]} */\n  const links = pbn.Links.map((/** @type {DAGLinkLike} */link) => {\n    // @ts-ignore\n    return new DAGLink(link.Name, link.Tsize, link.Hash);\n  });\n  const data = pbn.Data == null ? new Uint8Array(0) : pbn.Data;\n  return new DAGNode(data, links, buffer.byteLength);\n};\nmodule.exports = {\n  codec: genCid.codec,\n  defaultHashAlg: genCid.defaultHashAlg,\n  serialize,\n  deserialize,\n  cid\n};","map":{"version":3,"names":["PBNode","require","DAGLink","DAGNode","serializeDAGNode","serializeDAGNodeLike","genCid","cid","binaryBlob","userOptions","serialize","node","Data","Links","deserialize","buffer","message","decode","pbn","toObject","defaults","arrays","longs","Number","objects","links","map","link","Name","Tsize","Hash","data","Uint8Array","byteLength","module","exports","codec","defaultHashAlg"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipld-dag-pb/src/util.js"],"sourcesContent":["'use strict'\n\nconst {\n  PBNode\n} = require('./dag')\nconst DAGLink = require('./dag-link/dagLink')\nconst DAGNode = require('./dag-node/dagNode')\nconst { serializeDAGNode, serializeDAGNodeLike } = require('./serialize')\nconst genCid = require('./genCid')\n\n/**\n * @typedef {import('./types').DAGLinkLike} DAGLinkLike\n */\n\n/**\n * Calculate the CID of the binary blob\n *\n * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n * @param {import('./genCid').GenCIDOptions} [userOptions] - Options to create the CID\n */\nconst cid = (binaryBlob, userOptions) => {\n  return genCid.cid(binaryBlob, userOptions)\n}\n\n/**\n * Serialize internal representation into a binary PB block\n *\n * @param {DAGNode | { Data?: Uint8Array, Links?: (DAGLink | DAGLinkLike)[]}} node\n */\nconst serialize = (node) => {\n  if (node instanceof DAGNode) {\n    return serializeDAGNode(node)\n  } else {\n    return serializeDAGNodeLike(node.Data, node.Links)\n  }\n}\n\n/**\n * Deserialize PB block into the internal representation.\n *\n * @param {Uint8Array} buffer - Binary representation of a PB block\n */\nconst deserialize = (buffer) => {\n  const message = PBNode.decode(buffer)\n  const pbn = PBNode.toObject(message, {\n    defaults: false,\n    arrays: true,\n    longs: Number,\n    objects: false\n  })\n\n  /** @type {DAGLink[]} */\n  const links = pbn.Links.map((/** @type {DAGLinkLike} */ link) => {\n    // @ts-ignore\n    return new DAGLink(link.Name, link.Tsize, link.Hash)\n  })\n\n  const data = pbn.Data == null ? new Uint8Array(0) : pbn.Data\n\n  return new DAGNode(data, links, buffer.byteLength)\n}\n\nmodule.exports = {\n  codec: genCid.codec,\n  defaultHashAlg: genCid.defaultHashAlg,\n  serialize,\n  deserialize,\n  cid\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EACJA;AACF,CAAC,GAAGC,OAAO,CAAC,OAAO,CAAC;AACpB,MAAMC,OAAO,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC7C,MAAME,OAAO,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAC7C,MAAM;EAAEG,gBAAgB;EAAEC;AAAqB,CAAC,GAAGJ,OAAO,CAAC,aAAa,CAAC;AACzE,MAAMK,MAAM,GAAGL,OAAO,CAAC,UAAU,CAAC;;AAElC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,GAAG,GAAGA,CAACC,UAAU,EAAEC,WAAW,KAAK;EACvC,OAAOH,MAAM,CAACC,GAAG,CAACC,UAAU,EAAEC,WAAW,CAAC;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAIC,IAAI,IAAK;EAC1B,IAAIA,IAAI,YAAYR,OAAO,EAAE;IAC3B,OAAOC,gBAAgB,CAACO,IAAI,CAAC;EAC/B,CAAC,MAAM;IACL,OAAON,oBAAoB,CAACM,IAAI,CAACC,IAAI,EAAED,IAAI,CAACE,KAAK,CAAC;EACpD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAC9B,MAAMC,OAAO,GAAGhB,MAAM,CAACiB,MAAM,CAACF,MAAM,CAAC;EACrC,MAAMG,GAAG,GAAGlB,MAAM,CAACmB,QAAQ,CAACH,OAAO,EAAE;IACnCI,QAAQ,EAAE,KAAK;IACfC,MAAM,EAAE,IAAI;IACZC,KAAK,EAAEC,MAAM;IACbC,OAAO,EAAE;EACX,CAAC,CAAC;;EAEF;EACA,MAAMC,KAAK,GAAGP,GAAG,CAACL,KAAK,CAACa,GAAG,CAAC,CAAC,0BAA2BC,IAAI,KAAK;IAC/D;IACA,OAAO,IAAIzB,OAAO,CAACyB,IAAI,CAACC,IAAI,EAAED,IAAI,CAACE,KAAK,EAAEF,IAAI,CAACG,IAAI,CAAC;EACtD,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAGb,GAAG,CAACN,IAAI,IAAI,IAAI,GAAG,IAAIoB,UAAU,CAAC,CAAC,CAAC,GAAGd,GAAG,CAACN,IAAI;EAE5D,OAAO,IAAIT,OAAO,CAAC4B,IAAI,EAAEN,KAAK,EAAEV,MAAM,CAACkB,UAAU,CAAC;AACpD,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG;EACfC,KAAK,EAAE9B,MAAM,CAAC8B,KAAK;EACnBC,cAAc,EAAE/B,MAAM,CAAC+B,cAAc;EACrC3B,SAAS;EACTI,WAAW;EACXP;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}