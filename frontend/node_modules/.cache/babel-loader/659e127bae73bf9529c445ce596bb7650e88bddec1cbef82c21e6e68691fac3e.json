{"ast":null,"code":"'use strict';\n\n// @ts-ignore - no types available\nconst blake = require('blakejs');\nconst minB = 0xb201;\nconst minS = 0xb241;\nconst blake2b = {\n  init: blake.blake2bInit,\n  update: blake.blake2bUpdate,\n  digest: blake.blake2bFinal\n};\nconst blake2s = {\n  init: blake.blake2sInit,\n  update: blake.blake2sUpdate,\n  digest: blake.blake2sFinal\n};\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n// eslint-disable-next-line\n\n/**\n * @param {number} size\n * @param {any} hf\n * @returns {import('./types').Digest}\n */\nconst makeB2Hash = (size, hf) => async data => {\n  const ctx = hf.init(size, null);\n  hf.update(ctx, data);\n  return hf.digest(ctx);\n};\n\n/**\n * @param {Record<number, import('./types').Digest>} table\n */\nmodule.exports = table => {\n  for (let i = 0; i < 64; i++) {\n    table[minB + i] = makeB2Hash(i + 1, blake2b);\n  }\n  for (let i = 0; i < 32; i++) {\n    table[minS + i] = makeB2Hash(i + 1, blake2s);\n  }\n};","map":{"version":3,"names":["blake","require","minB","minS","blake2b","init","blake2bInit","update","blake2bUpdate","digest","blake2bFinal","blake2s","blake2sInit","blake2sUpdate","blake2sFinal","makeB2Hash","size","hf","data","ctx","module","exports","table","i"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/multihashing-async/src/blake.js"],"sourcesContent":["'use strict'\n\n// @ts-ignore - no types available\nconst blake = require('blakejs')\n\nconst minB = 0xb201\nconst minS = 0xb241\n\nconst blake2b = {\n  init: blake.blake2bInit,\n  update: blake.blake2bUpdate,\n  digest: blake.blake2bFinal\n}\n\nconst blake2s = {\n  init: blake.blake2sInit,\n  update: blake.blake2sUpdate,\n  digest: blake.blake2sFinal\n}\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n// eslint-disable-next-line\n\n/**\n * @param {number} size\n * @param {any} hf\n * @returns {import('./types').Digest}\n */\nconst makeB2Hash = (size, hf) => async (data) => {\n  const ctx = hf.init(size, null)\n  hf.update(ctx, data)\n  return hf.digest(ctx)\n}\n\n/**\n * @param {Record<number, import('./types').Digest>} table\n */\nmodule.exports = (table) => {\n  for (let i = 0; i < 64; i++) {\n    table[minB + i] = makeB2Hash(i + 1, blake2b)\n  }\n  for (let i = 0; i < 32; i++) {\n    table[minS + i] = makeB2Hash(i + 1, blake2s)\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAEhC,MAAMC,IAAI,GAAG,MAAM;AACnB,MAAMC,IAAI,GAAG,MAAM;AAEnB,MAAMC,OAAO,GAAG;EACdC,IAAI,EAAEL,KAAK,CAACM,WAAW;EACvBC,MAAM,EAAEP,KAAK,CAACQ,aAAa;EAC3BC,MAAM,EAAET,KAAK,CAACU;AAChB,CAAC;AAED,MAAMC,OAAO,GAAG;EACdN,IAAI,EAAEL,KAAK,CAACY,WAAW;EACvBL,MAAM,EAAEP,KAAK,CAACa,aAAa;EAC3BJ,MAAM,EAAET,KAAK,CAACc;AAChB,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAGA,CAACC,IAAI,EAAEC,EAAE,KAAK,MAAOC,IAAI,IAAK;EAC/C,MAAMC,GAAG,GAAGF,EAAE,CAACZ,IAAI,CAACW,IAAI,EAAE,IAAI,CAAC;EAC/BC,EAAE,CAACV,MAAM,CAACY,GAAG,EAAED,IAAI,CAAC;EACpB,OAAOD,EAAE,CAACR,MAAM,CAACU,GAAG,CAAC;AACvB,CAAC;;AAED;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAIC,KAAK,IAAK;EAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC3BD,KAAK,CAACpB,IAAI,GAAGqB,CAAC,CAAC,GAAGR,UAAU,CAACQ,CAAC,GAAG,CAAC,EAAEnB,OAAO,CAAC;EAC9C;EACA,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC3BD,KAAK,CAACnB,IAAI,GAAGoB,CAAC,CAAC,GAAGR,UAAU,CAACQ,CAAC,GAAG,CAAC,EAAEZ,OAAO,CAAC;EAC9C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}