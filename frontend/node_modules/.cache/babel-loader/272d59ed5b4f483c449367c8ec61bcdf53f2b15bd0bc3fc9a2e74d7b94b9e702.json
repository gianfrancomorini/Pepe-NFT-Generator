{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst configure = require('../lib/configure');\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function* rmAll(source, options = {}) {\n    for await (const {\n      path,\n      recursive\n    } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams);\n      searchParams.append('arg', `${path}`);\n      if (recursive != null) searchParams.set('recursive', String(recursive));\n      const res = await api.post('pin/rm', {\n        timeout: options.timeout,\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      });\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          // non-streaming response\n          yield* pin.Pins.map((/** @type {string} */cid) => new CID(cid));\n          continue;\n        }\n        yield new CID(pin);\n      }\n    }\n  }\n  return rmAll;\n});","map":{"version":3,"names":["CID","require","configure","normaliseInput","toUrlSearchParams","module","exports","api","rmAll","source","options","path","recursive","searchParams","URLSearchParams","append","set","String","res","post","timeout","signal","headers","arg","pin","ndjson","Pins","map","cid"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/pin/rm-all.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        timeout: options.timeout,\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => new CID(cid))\n          continue\n        }\n        yield new CID(pin)\n      }\n    }\n  }\n  return rmAll\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,cAAc,GAAGF,OAAO,CAAC,0CAA0C,CAAC;AAC1E,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGJ,SAAS,CAACK,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,KAAKA,CAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC5C,WAAW,MAAM;MAAEC,IAAI;MAAEC;IAAU,CAAC,IAAIT,cAAc,CAACM,MAAM,CAAC,EAAE;MAC9D,MAAMI,YAAY,GAAG,IAAIC,eAAe,CAACJ,OAAO,CAACG,YAAY,CAAC;MAC9DA,YAAY,CAACE,MAAM,CAAC,KAAK,EAAE,GAAGJ,IAAI,EAAE,CAAC;MAErC,IAAIC,SAAS,IAAI,IAAI,EAAEC,YAAY,CAACG,GAAG,CAAC,WAAW,EAAEC,MAAM,CAACL,SAAS,CAAC,CAAC;MAEvE,MAAMM,GAAG,GAAG,MAAMX,GAAG,CAACY,IAAI,CAAC,QAAQ,EAAE;QACnCC,OAAO,EAAEV,OAAO,CAACU,OAAO;QACxBC,MAAM,EAAEX,OAAO,CAACW,MAAM;QACtBC,OAAO,EAAEZ,OAAO,CAACY,OAAO;QACxBT,YAAY,EAAET,iBAAiB,CAAC;UAC9B,GAAGM,OAAO;UACVa,GAAG,EAAE,GAAGZ,IAAI,EAAE;UACdC;QACF,CAAC;MACH,CAAC,CAAC;MAEF,WAAW,MAAMY,GAAG,IAAIN,GAAG,CAACO,MAAM,CAAC,CAAC,EAAE;QACpC,IAAID,GAAG,CAACE,IAAI,EAAE;UAAE;UACd,OAAQF,GAAG,CAACE,IAAI,CAACC,GAAG,CAAC,CAAC,qBAAsBC,GAAG,KAAK,IAAI5B,GAAG,CAAC4B,GAAG,CAAC,CAAC;UACjE;QACF;QACA,MAAM,IAAI5B,GAAG,CAACwB,GAAG,CAAC;MACpB;IACF;EACF;EACA,OAAOhB,KAAK;AACd,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}