{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RepoAPI[\"gc\"]}\n   */\n  async function* gc(options = {}) {\n    const res = await api.post('repo/gc', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: res => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? new CID(res.Key['/']) : null\n        };\n      }\n    });\n    yield* res.ndjson();\n  }\n  return gc;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","gc","options","res","post","timeout","signal","searchParams","headers","transform","err","Error","cid","Key","ndjson"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/repo/gc.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RepoAPI[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const res = await api.post('repo/gc', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (res) => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? new CID(res.Key['/']) : null\n        }\n      }\n    })\n\n    yield * res.ndjson()\n  }\n  return gc\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,EAAEA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjC,MAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,SAAS,EAAE;MACpCC,OAAO,EAAEH,OAAO,CAACG,OAAO;MACxBC,MAAM,EAAEJ,OAAO,CAACI,MAAM;MACtBC,YAAY,EAAEV,iBAAiB,CAACK,OAAO,CAAC;MACxCM,OAAO,EAAEN,OAAO,CAACM,OAAO;MACxBC,SAAS,EAAGN,GAAG,IAAK;QAClB,OAAO;UACLO,GAAG,EAAEP,GAAG,CAACQ,KAAK,GAAG,IAAIA,KAAK,CAACR,GAAG,CAACQ,KAAK,CAAC,GAAG,IAAI;UAC5CC,GAAG,EAAE,CAACT,GAAG,CAACU,GAAG,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,IAAInB,GAAG,CAACS,GAAG,CAACU,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG;QACtD,CAAC;MACH;IACF,CAAC,CAAC;IAEF,OAAQV,GAAG,CAACW,MAAM,CAAC,CAAC;EACtB;EACA,OAAOb,EAAE;AACX,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}