{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\nconst dagCBOR = require('ipld-dag-cbor');\nconst raw = require('ipld-raw');\nconst multicodec = require('multicodec');\n\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('interface-ipld-format').Format<any>} IPLDFormat\n * @typedef {import('multicodec').CodecName} CodecName\n * @typedef {import('../types').LoadFormatFn} LoadFormatFn\n */\n\n/**\n * @type {LoadFormatFn}\n */\nconst noop = codec => {\n  return Promise.reject(new Error(`Missing IPLD format \"${codec}\"`));\n};\n\n/**\n * Return an object containing supported IPLD Formats\n *\n * @param {object} [options] - IPLD options passed to the http client constructor\n * @param {IPLDFormat[]} [options.formats] - A list of IPLD Formats to use\n * @param {LoadFormatFn} [options.loadFormat] - An async function that can load a format when passed a codec name\n */\nmodule.exports = ({\n  formats = [],\n  loadFormat = noop\n} = {}) => {\n  formats = formats || [];\n  loadFormat = loadFormat || noop;\n  const configuredFormats = {\n    [multicodec.DAG_PB]: dagPB,\n    [multicodec.DAG_CBOR]: dagCBOR,\n    [multicodec.RAW]: raw\n  };\n  formats.forEach(format => {\n    configuredFormats[format.codec] = format;\n  });\n\n  /**\n   * Attempts to load an IPLD format for the passed CID\n   *\n   * @param {CodecName} codec - The code to load the format for\n   */\n  const loadResolver = async codec => {\n    const number = multicodec.getCodeFromName(codec);\n    const format = configuredFormats[number] || (await loadFormat(codec));\n    if (!format) {\n      throw Object.assign(new Error(`Missing IPLD format \"${codec}\"`), {\n        missingMulticodec: codec\n      });\n    }\n    return format;\n  };\n  return loadResolver;\n};","map":{"version":3,"names":["dagPB","require","dagCBOR","raw","multicodec","noop","codec","Promise","reject","Error","module","exports","formats","loadFormat","configuredFormats","DAG_PB","DAG_CBOR","RAW","forEach","format","loadResolver","number","getCodeFromName","Object","assign","missingMulticodec"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/lib/ipld-formats.js"],"sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst raw = require('ipld-raw')\nconst multicodec = require('multicodec')\n\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('interface-ipld-format').Format<any>} IPLDFormat\n * @typedef {import('multicodec').CodecName} CodecName\n * @typedef {import('../types').LoadFormatFn} LoadFormatFn\n */\n\n/**\n * @type {LoadFormatFn}\n */\nconst noop = (codec) => {\n  return Promise.reject(new Error(`Missing IPLD format \"${codec}\"`))\n}\n\n/**\n * Return an object containing supported IPLD Formats\n *\n * @param {object} [options] - IPLD options passed to the http client constructor\n * @param {IPLDFormat[]} [options.formats] - A list of IPLD Formats to use\n * @param {LoadFormatFn} [options.loadFormat] - An async function that can load a format when passed a codec name\n */\nmodule.exports = ({ formats = [], loadFormat = noop } = {}) => {\n  formats = formats || []\n  loadFormat = loadFormat || noop\n\n  const configuredFormats = {\n    [multicodec.DAG_PB]: dagPB,\n    [multicodec.DAG_CBOR]: dagCBOR,\n    [multicodec.RAW]: raw\n  }\n\n  formats.forEach(format => {\n    configuredFormats[format.codec] = format\n  })\n\n  /**\n   * Attempts to load an IPLD format for the passed CID\n   *\n   * @param {CodecName} codec - The code to load the format for\n   */\n  const loadResolver = async (codec) => {\n    const number = multicodec.getCodeFromName(codec)\n    const format = configuredFormats[number] || await loadFormat(codec)\n\n    if (!format) {\n      throw Object.assign(\n        new Error(`Missing IPLD format \"${codec}\"`),\n        { missingMulticodec: codec }\n      )\n    }\n\n    return format\n  }\n\n  return loadResolver\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AACpC,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAe,CAAC;AACxC,MAAME,GAAG,GAAGF,OAAO,CAAC,UAAU,CAAC;AAC/B,MAAMG,UAAU,GAAGH,OAAO,CAAC,YAAY,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMI,IAAI,GAAIC,KAAK,IAAK;EACtB,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,wBAAwBH,KAAK,GAAG,CAAC,CAAC;AACpE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAI,MAAM,CAACC,OAAO,GAAG,CAAC;EAAEC,OAAO,GAAG,EAAE;EAAEC,UAAU,GAAGR;AAAK,CAAC,GAAG,CAAC,CAAC,KAAK;EAC7DO,OAAO,GAAGA,OAAO,IAAI,EAAE;EACvBC,UAAU,GAAGA,UAAU,IAAIR,IAAI;EAE/B,MAAMS,iBAAiB,GAAG;IACxB,CAACV,UAAU,CAACW,MAAM,GAAGf,KAAK;IAC1B,CAACI,UAAU,CAACY,QAAQ,GAAGd,OAAO;IAC9B,CAACE,UAAU,CAACa,GAAG,GAAGd;EACpB,CAAC;EAEDS,OAAO,CAACM,OAAO,CAACC,MAAM,IAAI;IACxBL,iBAAiB,CAACK,MAAM,CAACb,KAAK,CAAC,GAAGa,MAAM;EAC1C,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;EACE,MAAMC,YAAY,GAAG,MAAOd,KAAK,IAAK;IACpC,MAAMe,MAAM,GAAGjB,UAAU,CAACkB,eAAe,CAAChB,KAAK,CAAC;IAChD,MAAMa,MAAM,GAAGL,iBAAiB,CAACO,MAAM,CAAC,KAAI,MAAMR,UAAU,CAACP,KAAK,CAAC;IAEnE,IAAI,CAACa,MAAM,EAAE;MACX,MAAMI,MAAM,CAACC,MAAM,CACjB,IAAIf,KAAK,CAAC,wBAAwBH,KAAK,GAAG,CAAC,EAC3C;QAAEmB,iBAAiB,EAAEnB;MAAM,CAC7B,CAAC;IACH;IAEA,OAAOa,MAAM;EACf,CAAC;EAED,OAAOC,YAAY;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}