{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst multihash = require('multihashes');\nconst configure = require('../lib/configure');\nconst multipartRequest = require('../lib/multipart-request');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst abortSignal = require('../lib/abort-signal');\nconst {\n  AbortController\n} = require('native-abort-controller');\nconst multicodec = require('multicodec');\nconst loadFormat = require('../lib/ipld-formats');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  const load = loadFormat(opts.ipld);\n\n  /**\n   * @type {DAGAPI[\"put\"]}\n   */\n  const put = async (dagNode, options = {}) => {\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options');\n    } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {\n      throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options');\n    }\n    let encodingOptions;\n    if (options.cid) {\n      const cid = new CID(options.cid);\n      encodingOptions = {\n        ...options,\n        format: multicodec.getName(cid.code),\n        hashAlg: multihash.decode(cid.multihash).name\n      };\n      delete options.cid;\n    } else {\n      encodingOptions = options;\n    }\n    const settings = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw',\n      ...encodingOptions\n    };\n\n    // @ts-ignore settings.format might be an invalid CodecName\n    const format = await load(settings.format);\n    const serialized = format.util.serialize(dagNode);\n\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, settings.signal);\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('dag/put', {\n      timeout: settings.timeout,\n      signal,\n      searchParams: toUrlSearchParams(settings),\n      ...(await multipartRequest(serialized, controller, settings.headers))\n    });\n    const data = await res.json();\n    return new CID(data.Cid['/']);\n  };\n  return put;\n});","map":{"version":3,"names":["CID","require","multihash","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","multicodec","loadFormat","module","exports","api","opts","load","ipld","put","dagNode","options","cid","format","hashAlg","Error","encodingOptions","getName","code","decode","name","settings","inputEnc","serialized","util","serialize","controller","signal","res","post","timeout","searchParams","headers","data","json","Cid"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/dag/put.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\nconst multicodec = require('multicodec')\nconst loadFormat = require('../lib/ipld-formats')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  const load = loadFormat(opts.ipld)\n\n  /**\n   * @type {DAGAPI[\"put\"]}\n   */\n  const put = async (dagNode, options = {}) => {\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options')\n    } else if ((options.format && !options.hashAlg) || (!options.format && options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options')\n    }\n\n    let encodingOptions\n    if (options.cid) {\n      const cid = new CID(options.cid)\n      encodingOptions = {\n        ...options,\n        format: multicodec.getName(cid.code),\n        hashAlg: multihash.decode(cid.multihash).name\n      }\n      delete options.cid\n    } else {\n      encodingOptions = options\n    }\n\n    const settings = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw',\n      ...encodingOptions\n    }\n\n    // @ts-ignore settings.format might be an invalid CodecName\n    const format = await load(settings.format)\n    const serialized = format.util.serialize(dagNode)\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, settings.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('dag/put', {\n      timeout: settings.timeout,\n      signal,\n      searchParams: toUrlSearchParams(settings),\n      ...(\n        await multipartRequest(serialized, controller, settings.headers)\n      )\n    })\n    const data = await res.json()\n\n    return new CID(data.Cid['/'])\n  }\n\n  return put\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}