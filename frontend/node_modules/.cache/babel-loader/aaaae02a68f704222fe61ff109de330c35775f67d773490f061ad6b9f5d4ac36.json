{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"resolve\"]}\n   */\n  const resolve = async (ipfsPath, options = {}) => {\n    const res = await api.post('dag/resolve', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\\/[/]+/g, '/') : ''}`,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return {\n      cid: new CID(data.Cid['/']),\n      remainderPath: data.RemPath\n    };\n  };\n  return resolve;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","resolve","ipfsPath","options","res","post","timeout","signal","searchParams","arg","path","replace","headers","data","json","cid","Cid","remainderPath","RemPath"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/dag/resolve.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"resolve\"]}\n   */\n  const resolve = async (ipfsPath, options = {}) => {\n    const res = await api.post('dag/resolve', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\\/[/]+/g, '/') : ''}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return { cid: new CID(data.Cid['/']), remainderPath: data.RemPath }\n  }\n\n  return resolve\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,MAAMC,OAAO,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAChD,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,aAAa,EAAE;MACxCC,OAAO,EAAEH,OAAO,CAACG,OAAO;MACxBC,MAAM,EAAEJ,OAAO,CAACI,MAAM;MACtBC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAE,GAAGP,QAAQ,GAAGC,OAAO,CAACO,IAAI,GAAG,IAAIP,OAAO,CAACO,IAAI,EAAE,CAACC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE;QACnF,GAAGR;MACL,CAAC,CAAC;MACFS,OAAO,EAAET,OAAO,CAACS;IACnB,CAAC,CAAC;IAEF,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,CAAC;IAE7B,OAAO;MAAEC,GAAG,EAAE,IAAIrB,GAAG,CAACmB,IAAI,CAACG,GAAG,CAAC,GAAG,CAAC,CAAC;MAAEC,aAAa,EAAEJ,IAAI,CAACK;IAAQ,CAAC;EACrE,CAAC;EAED,OAAOjB,OAAO;AAChB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}