{"ast":null,"code":"'use strict';\n\nconst sortLinks = require('./sortLinks');\nconst DAGLink = require('../dag-link/dagLink');\nconst {\n  createDagLinkFromB58EncodedHash\n} = require('../dag-link/util');\nconst {\n  serializeDAGNode\n} = require('../serialize');\nconst toDAGLink = require('./toDagLink');\nconst addLink = require('./addLink');\nconst rmLink = require('./rmLink');\nconst uint8ArrayFromString = require('uint8arrays/from-string');\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('../types').DAGLinkLike} DAGLinkLike\n */\n\nclass DAGNode {\n  /**\n   *@param {Uint8Array | string} [data]\n   * @param {(DAGLink | DAGLinkLike)[]} links\n   * @param {number | null} [serializedSize]\n   */\n  constructor(data, links = [], serializedSize = null) {\n    if (!data) {\n      data = new Uint8Array(0);\n    }\n    if (typeof data === 'string') {\n      data = uint8ArrayFromString(data);\n    }\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Passed \\'data\\' is not a Uint8Array or a String!');\n    }\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!');\n    }\n    const sortedLinks = links.map(link => {\n      return link instanceof DAGLink ? link : createDagLinkFromB58EncodedHash(link);\n    });\n    sortLinks(sortedLinks);\n    this.Data = data;\n    this.Links = sortedLinks;\n    Object.defineProperties(this, {\n      _serializedSize: {\n        value: serializedSize,\n        writable: true,\n        enumerable: false\n      },\n      _size: {\n        value: null,\n        writable: true,\n        enumerable: false\n      }\n    });\n  }\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this.Links.map(l => l.toJSON()),\n        size: this.size\n      });\n    }\n    return Object.assign({}, this._json);\n  }\n  toString() {\n    return `DAGNode <data: \"${uint8ArrayToString(this.Data, 'base64urlpad')}\", links: ${this.Links.length}, size: ${this.size}>`;\n  }\n  _invalidateCached() {\n    this._serializedSize = null;\n    this._size = null;\n  }\n\n  /**\n   * @param {DAGLink | import('../types').DAGLinkLike} link\n   */\n  addLink(link) {\n    this._invalidateCached();\n    return addLink(this, link);\n  }\n\n  /**\n   * @param {DAGLink | string | CID} link\n   */\n  rmLink(link) {\n    this._invalidateCached();\n    return rmLink(this, link);\n  }\n\n  /**\n   * @param {import('./toDagLink').ToDagLinkOptions} [options]\n   */\n  toDAGLink(options) {\n    return toDAGLink(this, options);\n  }\n  serialize() {\n    const buf = serializeDAGNode(this);\n    this._serializedSize = buf.length;\n    return buf;\n  }\n  get size() {\n    if (this._size == null) {\n      let serializedSize;\n      if (serializedSize == null) {\n        this._serializedSize = this.serialize().length;\n        serializedSize = this._serializedSize;\n      }\n      this._size = this.Links.reduce((sum, l) => sum + l.Tsize, serializedSize);\n    }\n    return this._size;\n  }\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n}\nmodule.exports = DAGNode;","map":{"version":3,"names":["sortLinks","require","DAGLink","createDagLinkFromB58EncodedHash","serializeDAGNode","toDAGLink","addLink","rmLink","uint8ArrayFromString","uint8ArrayToString","DAGNode","constructor","data","links","serializedSize","Uint8Array","Error","sortedLinks","map","link","Data","Links","Object","defineProperties","_serializedSize","value","writable","enumerable","_size","toJSON","_json","freeze","l","size","assign","toString","length","_invalidateCached","options","serialize","buf","reduce","sum","Tsize","module","exports"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipld-dag-pb/src/dag-node/dagNode.js"],"sourcesContent":["'use strict'\n\nconst sortLinks = require('./sortLinks')\nconst DAGLink = require('../dag-link/dagLink')\nconst { createDagLinkFromB58EncodedHash } = require('../dag-link/util')\nconst { serializeDAGNode } = require('../serialize')\nconst toDAGLink = require('./toDagLink')\nconst addLink = require('./addLink')\nconst rmLink = require('./rmLink')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('../types').DAGLinkLike} DAGLinkLike\n */\n\nclass DAGNode {\n  /**\n   *@param {Uint8Array | string} [data]\n   * @param {(DAGLink | DAGLinkLike)[]} links\n   * @param {number | null} [serializedSize]\n   */\n  constructor (data, links = [], serializedSize = null) {\n    if (!data) {\n      data = new Uint8Array(0)\n    }\n    if (typeof data === 'string') {\n      data = uint8ArrayFromString(data)\n    }\n\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Passed \\'data\\' is not a Uint8Array or a String!')\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!')\n    }\n\n    const sortedLinks = links.map((link) => {\n      return link instanceof DAGLink\n        ? link\n        : createDagLinkFromB58EncodedHash(link)\n    })\n    sortLinks(sortedLinks)\n\n    this.Data = data\n    this.Links = sortedLinks\n\n    Object.defineProperties(this, {\n      _serializedSize: { value: serializedSize, writable: true, enumerable: false },\n      _size: { value: null, writable: true, enumerable: false }\n    })\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this.Links.map((l) => l.toJSON()),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <data: \"${uint8ArrayToString(this.Data, 'base64urlpad')}\", links: ${this.Links.length}, size: ${this.size}>`\n  }\n\n  _invalidateCached () {\n    this._serializedSize = null\n    this._size = null\n  }\n\n  /**\n   * @param {DAGLink | import('../types').DAGLinkLike} link\n   */\n  addLink (link) {\n    this._invalidateCached()\n    return addLink(this, link)\n  }\n\n  /**\n   * @param {DAGLink | string | CID} link\n   */\n  rmLink (link) {\n    this._invalidateCached()\n    return rmLink(this, link)\n  }\n\n  /**\n   * @param {import('./toDagLink').ToDagLinkOptions} [options]\n   */\n  toDAGLink (options) {\n    return toDAGLink(this, options)\n  }\n\n  serialize () {\n    const buf = serializeDAGNode(this)\n\n    this._serializedSize = buf.length\n\n    return buf\n  }\n\n  get size () {\n    if (this._size == null) {\n      let serializedSize\n\n      if (serializedSize == null) {\n        this._serializedSize = this.serialize().length\n        serializedSize = this._serializedSize\n      }\n\n      this._size = this.Links.reduce((sum, l) => sum + l.Tsize, serializedSize)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n}\n\nmodule.exports = DAGNode\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}