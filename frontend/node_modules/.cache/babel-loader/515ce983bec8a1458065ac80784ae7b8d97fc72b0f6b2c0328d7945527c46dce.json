{"ast":null,"code":"'use strict';\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\nconst uint8ArrayToString = require('uint8arrays/to-string');\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker')} subsTracker\n */\nmodule.exports = (options, subsTracker) => {\n  return configure(api => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe(topic, handler, options = {}) {\n      // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal);\n\n      /** @type {(value?: any) => void} */\n      let done;\n      /** @type {(error: Error) => void} */\n      let fail;\n      const result = new Promise((resolve, reject) => {\n        done = resolve;\n        fail = reject;\n      });\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000);\n\n      // Do this async to not block Firefox\n      setTimeout(() => {\n        api.post('pubsub/sub', {\n          timeout: options.timeout,\n          signal: options.signal,\n          searchParams: toUrlSearchParams({\n            arg: topic,\n            ...options\n          }),\n          headers: options.headers\n        }).catch(err => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler);\n          fail(err);\n        }).then(response => {\n          clearTimeout(ffWorkaround);\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return;\n          }\n          readMessages(response, {\n            onMessage: handler,\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          });\n          done();\n        });\n      }, 0);\n      return result;\n    }\n    return subscribe;\n  })(options);\n};\n\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages(response, {\n  onMessage,\n  onEnd,\n  onError\n}) {\n  onError = onError || log;\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue;\n        }\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        });\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`;\n        onError(err, false, msg); // Not fatal\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true); // Fatal\n    }\n  } finally {\n    onEnd();\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true;\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError';\n  }\n};","map":{"version":3,"names":["uint8ArrayFromString","require","uint8ArrayToString","log","configure","toUrlSearchParams","module","exports","options","subsTracker","api","subscribe","topic","handler","signal","done","fail","result","Promise","resolve","reject","ffWorkaround","setTimeout","post","timeout","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","onMessage","onEnd","onError","msg","ndjson","from","data","seqno","topicIDs","message","isAbortError","error","type","name"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/pubsub/subscribe.js"],"sourcesContent":["'use strict'\n\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker')} subsTracker\n */\nmodule.exports = (options, subsTracker) => {\n  return configure((api) => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n      /** @type {(value?: any) => void} */\n      let done\n      /** @type {(error: Error) => void} */\n      let fail\n\n      const result = new Promise((resolve, reject) => {\n        done = resolve\n        fail = reject\n      })\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000)\n\n      // Do this async to not block Firefox\n      setTimeout(() => {\n        api.post('pubsub/sub', {\n          timeout: options.timeout,\n          signal: options.signal,\n          searchParams: toUrlSearchParams({\n            arg: topic,\n            ...options\n          }),\n          headers: options.headers\n        })\n          .catch((err) => {\n            // Initial subscribe fail, ensure we clean up\n            subsTracker.unsubscribe(topic, handler)\n\n            fail(err)\n          })\n          .then((response) => {\n            clearTimeout(ffWorkaround)\n\n            if (!response) {\n              // if there was no response, the subscribe failed\n              return\n            }\n\n            readMessages(response, {\n              onMessage: handler,\n              onEnd: () => subsTracker.unsubscribe(topic, handler),\n              onError: options.onError\n            })\n\n            done()\n          })\n      }, 0)\n\n      return result\n    }\n    return subscribe\n  })(options)\n}\n\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages (response, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        })\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}