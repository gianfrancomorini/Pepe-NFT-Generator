{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst {\n  Value\n} = require('./response-types');\nconst uint8ArrayToString = require('uint8arrays/to-string');\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"get\"]}\n   */\n  async function get(key, options = {}) {\n    const res = await api.post('dht/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const message of res.ndjson()) {\n      if (message.Type === Value) {\n        return uint8ArrayFromString(message.Extra, 'base64pad');\n      }\n    }\n    throw new Error('not found');\n  }\n  return get;\n});","map":{"version":3,"names":["configure","require","toUrlSearchParams","Value","uint8ArrayToString","uint8ArrayFromString","module","exports","api","get","key","options","res","post","timeout","signal","searchParams","arg","Uint8Array","headers","message","ndjson","Type","Extra","Error"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/dht/get.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Value } = require('./response-types')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"get\"]}\n   */\n  async function get (key, options = {}) {\n    const res = await api.post('dht/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Value) {\n        return uint8ArrayFromString(message.Extra, 'base64pad')\n      }\n    }\n\n    throw new Error('not found')\n  }\n\n  return get\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAM;EAAEE;AAAM,CAAC,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AAC3D,MAAMI,oBAAoB,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;;AAE/D;AACA;AACA;AACA;;AAEAK,MAAM,CAACC,OAAO,GAAGP,SAAS,CAACQ,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,GAAGA,CAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACrC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,SAAS,EAAE;MACpCC,OAAO,EAAEH,OAAO,CAACG,OAAO;MACxBC,MAAM,EAAEJ,OAAO,CAACI,MAAM;MACtBC,YAAY,EAAEd,iBAAiB,CAAC;QAC9Be,GAAG,EAAEP,GAAG,YAAYQ,UAAU,GAAGd,kBAAkB,CAACM,GAAG,CAAC,GAAGA,GAAG;QAC9D,GAAGC;MACL,CAAC,CAAC;MACFQ,OAAO,EAAER,OAAO,CAACQ;IACnB,CAAC,CAAC;IAEF,WAAW,MAAMC,OAAO,IAAIR,GAAG,CAACS,MAAM,CAAC,CAAC,EAAE;MACxC,IAAID,OAAO,CAACE,IAAI,KAAKnB,KAAK,EAAE;QAC1B,OAAOE,oBAAoB,CAACe,OAAO,CAACG,KAAK,EAAE,WAAW,CAAC;MACzD;IACF;IAEA,MAAM,IAAIC,KAAK,CAAC,WAAW,CAAC;EAC9B;EAEA,OAAOf,GAAG;AACZ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}