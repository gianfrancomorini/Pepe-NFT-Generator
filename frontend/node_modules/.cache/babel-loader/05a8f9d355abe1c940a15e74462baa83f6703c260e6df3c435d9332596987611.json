{"ast":null,"code":"/* eslint-disable require-await */\n'use strict';\n\nconst multihash = require('multihashes');\n/**\n * @typedef {import('multihashes').HashName} HashName\n * @typedef {import('./types').Digest} Digest\n */\n\n/**\n * @type {Crypto}\n */\nconst crypto = self.crypto || (/** @type {typeof window.crypto} */\n// @ts-ignore - unknown property\nself.msCrypto);\n\n/**\n *\n * @param {Uint8Array} data\n * @param {HashName} alg\n * @returns {Promise<Uint8Array>}\n */\nconst digest = async (data, alg) => {\n  if (typeof self === 'undefined' || !crypto) {\n    throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context');\n  }\n  switch (alg) {\n    case 'sha1':\n      return new Uint8Array(await crypto.subtle.digest({\n        name: 'SHA-1'\n      }, data));\n    case 'sha2-256':\n      return new Uint8Array(await crypto.subtle.digest({\n        name: 'SHA-256'\n      }, data));\n    case 'sha2-512':\n      return new Uint8Array(await crypto.subtle.digest({\n        name: 'SHA-512'\n      }, data));\n    case 'dbl-sha2-256':\n      {\n        const d = await crypto.subtle.digest({\n          name: 'SHA-256'\n        }, data);\n        return new Uint8Array(await crypto.subtle.digest({\n          name: 'SHA-256'\n        }, d));\n      }\n    default:\n      throw new Error(`${alg} is not a supported algorithm`);\n  }\n};\nmodule.exports = {\n  /**\n   * @param {HashName} alg\n   * @returns {Digest}\n   */\n  factory: alg => async data => {\n    return digest(data, alg);\n  },\n  digest,\n  /**\n   * @param {Uint8Array} buf\n   * @param {HashName} alg\n   * @param {number} [length]\n   */\n  multihashing: async (buf, alg, length) => {\n    const h = await digest(buf, alg);\n    return multihash.encode(h, alg, length);\n  }\n};","map":{"version":3,"names":["multihash","require","crypto","self","msCrypto","digest","data","alg","Error","Uint8Array","subtle","name","d","module","exports","factory","multihashing","buf","length","h","encode"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/multihashing-async/src/sha.browser.js"],"sourcesContent":["/* eslint-disable require-await */\n'use strict'\n\nconst multihash = require('multihashes')\n/**\n * @typedef {import('multihashes').HashName} HashName\n * @typedef {import('./types').Digest} Digest\n */\n\n/**\n * @type {Crypto}\n */\nconst crypto =\n  self.crypto ||\n  /** @type {typeof window.crypto} */\n  // @ts-ignore - unknown property\n  (self.msCrypto)\n\n/**\n *\n * @param {Uint8Array} data\n * @param {HashName} alg\n * @returns {Promise<Uint8Array>}\n */\nconst digest = async (data, alg) => {\n  if (typeof self === 'undefined' || !crypto) {\n    throw new Error(\n      'Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context'\n    )\n  }\n  switch (alg) {\n    case 'sha1':\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-1' }, data))\n    case 'sha2-256':\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-256' }, data))\n    case 'sha2-512':\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-512' }, data))\n    case 'dbl-sha2-256': {\n      const d = await crypto.subtle.digest({ name: 'SHA-256' }, data)\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-256' }, d))\n    }\n    default:\n      throw new Error(`${alg} is not a supported algorithm`)\n  }\n}\n\nmodule.exports = {\n  /**\n   * @param {HashName} alg\n   * @returns {Digest}\n   */\n  factory: (alg) => async (data) => {\n    return digest(data, alg)\n  },\n  digest,\n  /**\n   * @param {Uint8Array} buf\n   * @param {HashName} alg\n   * @param {number} [length]\n   */\n  multihashing: async (buf, alg, length) => {\n    const h = await digest(buf, alg)\n    return multihash.encode(h, alg, length)\n  }\n}\n"],"mappings":"AAAA;AACA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,MAAM,GACVC,IAAI,CAACD,MAAM,KACX;AACA;AACCC,IAAI,CAACC,QAAQ,CAAC;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,MAAAA,CAAOC,IAAI,EAAEC,GAAG,KAAK;EAClC,IAAI,OAAOJ,IAAI,KAAK,WAAW,IAAI,CAACD,MAAM,EAAE;IAC1C,MAAM,IAAIM,KAAK,CACb,2IACF,CAAC;EACH;EACA,QAAQD,GAAG;IACT,KAAK,MAAM;MACT,OAAO,IAAIE,UAAU,CAAC,MAAMP,MAAM,CAACQ,MAAM,CAACL,MAAM,CAAC;QAAEM,IAAI,EAAE;MAAQ,CAAC,EAAEL,IAAI,CAAC,CAAC;IAC5E,KAAK,UAAU;MACb,OAAO,IAAIG,UAAU,CAAC,MAAMP,MAAM,CAACQ,MAAM,CAACL,MAAM,CAAC;QAAEM,IAAI,EAAE;MAAU,CAAC,EAAEL,IAAI,CAAC,CAAC;IAC9E,KAAK,UAAU;MACb,OAAO,IAAIG,UAAU,CAAC,MAAMP,MAAM,CAACQ,MAAM,CAACL,MAAM,CAAC;QAAEM,IAAI,EAAE;MAAU,CAAC,EAAEL,IAAI,CAAC,CAAC;IAC9E,KAAK,cAAc;MAAE;QACnB,MAAMM,CAAC,GAAG,MAAMV,MAAM,CAACQ,MAAM,CAACL,MAAM,CAAC;UAAEM,IAAI,EAAE;QAAU,CAAC,EAAEL,IAAI,CAAC;QAC/D,OAAO,IAAIG,UAAU,CAAC,MAAMP,MAAM,CAACQ,MAAM,CAACL,MAAM,CAAC;UAAEM,IAAI,EAAE;QAAU,CAAC,EAAEC,CAAC,CAAC,CAAC;MAC3E;IACA;MACE,MAAM,IAAIJ,KAAK,CAAC,GAAGD,GAAG,+BAA+B,CAAC;EAC1D;AACF,CAAC;AAEDM,MAAM,CAACC,OAAO,GAAG;EACf;AACF;AACA;AACA;EACEC,OAAO,EAAGR,GAAG,IAAK,MAAOD,IAAI,IAAK;IAChC,OAAOD,MAAM,CAACC,IAAI,EAAEC,GAAG,CAAC;EAC1B,CAAC;EACDF,MAAM;EACN;AACF;AACA;AACA;AACA;EACEW,YAAY,EAAE,MAAAA,CAAOC,GAAG,EAAEV,GAAG,EAAEW,MAAM,KAAK;IACxC,MAAMC,CAAC,GAAG,MAAMd,MAAM,CAACY,GAAG,EAAEV,GAAG,CAAC;IAChC,OAAOP,SAAS,CAACoB,MAAM,CAACD,CAAC,EAAEZ,GAAG,EAAEW,MAAM,CAAC;EACzC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}