{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat(path, options = {}) {\n    if (path && !CID.isCID(path) && typeof path !== 'string') {\n      options = path || {};\n      path = '/';\n    }\n    const res = await api.post('files/stat', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    data.WithLocality = data.WithLocality || false;\n    return toCoreInterface(toCamelWithMetadata(data));\n  }\n  return stat;\n});\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface(entry) {\n  entry.cid = new CID(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":{"version":3,"names":["CID","require","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","stat","path","options","isCID","res","post","timeout","signal","searchParams","arg","headers","data","json","WithLocality","toCoreInterface","entry","cid","hash"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/files/stat.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat (path, options = {}) {\n    if (path && !CID.isCID(path) && typeof path !== 'string') {\n      options = path || {}\n      path = '/'\n    }\n\n    const res = await api.post('files/stat', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(toCamelWithMetadata(data))\n  }\n  return stat\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  entry.cid = new CID(entry.hash)\n  delete entry.hash\n  return entry\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,sCAAsC,CAAC;AAC3E,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,IAAIA,CAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACvC,IAAID,IAAI,IAAI,CAACT,GAAG,CAACW,KAAK,CAACF,IAAI,CAAC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MACxDC,OAAO,GAAGD,IAAI,IAAI,CAAC,CAAC;MACpBA,IAAI,GAAG,GAAG;IACZ;IAEA,MAAMG,GAAG,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,YAAY,EAAE;MACvCC,OAAO,EAAEJ,OAAO,CAACI,OAAO;MACxBC,MAAM,EAAEL,OAAO,CAACK,MAAM;MACtBC,YAAY,EAAEZ,iBAAiB,CAAC;QAC9Ba,GAAG,EAAER,IAAI;QACT,GAAGC;MACL,CAAC,CAAC;MACFQ,OAAO,EAAER,OAAO,CAACQ;IACnB,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;IAE7BD,IAAI,CAACE,YAAY,GAAGF,IAAI,CAACE,YAAY,IAAI,KAAK;IAC9C,OAAOC,eAAe,CAACpB,mBAAmB,CAACiB,IAAI,CAAC,CAAC;EACnD;EACA,OAAOX,IAAI;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASc,eAAeA,CAAEC,KAAK,EAAE;EAC/BA,KAAK,CAACC,GAAG,GAAG,IAAIxB,GAAG,CAACuB,KAAK,CAACE,IAAI,CAAC;EAC/B,OAAOF,KAAK,CAACE,IAAI;EACjB,OAAOF,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}