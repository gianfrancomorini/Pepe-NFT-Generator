{"ast":null,"code":"'use strict';\n\nconst Block = require('ipld-block');\nconst CID = require('cids');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"get\"]}\n   */\n  async function get(cid, options = {}) {\n    // @ts-ignore - CID|string seems to confuse typedef\n    cid = new CID(cid);\n    const res = await api.post('block/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    return new Block(new Uint8Array(await res.arrayBuffer()), cid);\n  }\n  return get;\n});","map":{"version":3,"names":["Block","require","CID","configure","toUrlSearchParams","module","exports","api","get","cid","options","res","post","timeout","signal","searchParams","arg","toString","headers","Uint8Array","arrayBuffer"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/block/get.js"],"sourcesContent":["'use strict'\n\nconst Block = require('ipld-block')\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    // @ts-ignore - CID|string seems to confuse typedef\n    cid = new CID(cid)\n\n    const res = await api.post('block/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return new Block(new Uint8Array(await res.arrayBuffer()), cid)\n  }\n  return get\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;AACnC,MAAMC,GAAG,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,GAAGA,CAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACrC;IACAD,GAAG,GAAG,IAAIP,GAAG,CAACO,GAAG,CAAC;IAElB,MAAME,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,WAAW,EAAE;MACtCC,OAAO,EAAEH,OAAO,CAACG,OAAO;MACxBC,MAAM,EAAEJ,OAAO,CAACI,MAAM;MACtBC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAEP,GAAG,CAACQ,QAAQ,CAAC,CAAC;QACnB,GAAGP;MACL,CAAC,CAAC;MACFQ,OAAO,EAAER,OAAO,CAACQ;IACnB,CAAC,CAAC;IAEF,OAAO,IAAIlB,KAAK,CAAC,IAAImB,UAAU,CAAC,MAAMR,GAAG,CAACS,WAAW,CAAC,CAAC,CAAC,EAAEX,GAAG,CAAC;EAChE;EACA,OAAOD,GAAG;AACZ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}