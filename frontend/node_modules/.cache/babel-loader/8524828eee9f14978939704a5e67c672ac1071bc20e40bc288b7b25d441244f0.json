{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst multipartRequest = require('../lib/multipart-request');\nconst abortSignal = require('../lib/abort-signal');\nconst {\n  AbortController\n} = require('native-abort-controller');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  async function publish(topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: topic,\n      ...options\n    });\n\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('pubsub/pub', {\n      timeout: options.timeout,\n      signal,\n      searchParams,\n      ...(await multipartRequest(data, controller, options.headers))\n    });\n    await res.text();\n  }\n  return publish;\n});","map":{"version":3,"names":["configure","require","toUrlSearchParams","multipartRequest","abortSignal","AbortController","module","exports","api","publish","topic","data","options","searchParams","arg","controller","signal","res","post","timeout","headers","text"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/pubsub/publish.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: topic,\n      ...options\n    })\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('pubsub/pub', {\n      timeout: options.timeout,\n      signal,\n      searchParams,\n      ...(\n        await multipartRequest(data, controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return publish\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAME,gBAAgB,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AAC5D,MAAMG,WAAW,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAClD,MAAM;EAAEI;AAAgB,CAAC,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;;AAE9D;AACA;AACA;AACA;;AAEAK,MAAM,CAACC,OAAO,GAAGP,SAAS,CAACQ,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,OAAOA,CAAEC,KAAK,EAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjD,MAAMC,YAAY,GAAGX,iBAAiB,CAAC;MACrCY,GAAG,EAAEJ,KAAK;MACV,GAAGE;IACL,CAAC,CAAC;;IAEF;IACA,MAAMG,UAAU,GAAG,IAAIV,eAAe,CAAC,CAAC;IACxC,MAAMW,MAAM,GAAGZ,WAAW,CAACW,UAAU,CAACC,MAAM,EAAEJ,OAAO,CAACI,MAAM,CAAC;;IAE7D;IACA,MAAMC,GAAG,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,YAAY,EAAE;MACvCC,OAAO,EAAEP,OAAO,CAACO,OAAO;MACxBH,MAAM;MACNH,YAAY;MACZ,IACE,MAAMV,gBAAgB,CAACQ,IAAI,EAAEI,UAAU,EAAEH,OAAO,CAACQ,OAAO,CAAC;IAE7D,CAAC,CAAC;IAEF,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;EAClB;EACA,OAAOZ,OAAO;AAChB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}