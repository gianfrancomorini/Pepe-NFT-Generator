{"ast":null,"code":"const BufferList = require('bl/BufferList');\nmodule.exports = source => {\n  const reader = async function* () {\n    let bytes = yield; // Allows us to receive 8 when reader.next(8) is called\n    let bl = new BufferList();\n    for await (const chunk of source) {\n      if (!bytes) {\n        bytes = yield bl.append(chunk);\n        bl = new BufferList();\n        continue;\n      }\n      bl.append(chunk);\n      while (bl.length >= bytes) {\n        const data = bl.shallowSlice(0, bytes);\n        bl.consume(bytes);\n        bytes = yield data;\n\n        // If we no longer want a specific byte length, we yield the rest now\n        if (!bytes) {\n          if (bl.length) {\n            bytes = yield bl;\n            bl = new BufferList();\n          }\n          break; // bytes is null and/or no more buffer to yield\n        }\n      }\n    }\n\n    // Consumer wants more bytes but the source has ended and our buffer\n    // is not big enough to satisfy.\n    if (bytes) {\n      throw Object.assign(new Error(`stream ended before ${bytes} bytes became available`), {\n        code: 'ERR_UNDER_READ',\n        buffer: bl\n      });\n    }\n  }();\n  reader.next();\n  return reader;\n};","map":{"version":3,"names":["BufferList","require","module","exports","source","reader","bytes","bl","chunk","append","length","data","shallowSlice","consume","Object","assign","Error","code","buffer","next"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/it-reader/index.js"],"sourcesContent":["const BufferList = require('bl/BufferList')\n\nmodule.exports = source => {\n  const reader = (async function * () {\n    let bytes = yield // Allows us to receive 8 when reader.next(8) is called\n    let bl = new BufferList()\n\n    for await (const chunk of source) {\n      if (!bytes) {\n        bytes = yield bl.append(chunk)\n        bl = new BufferList()\n        continue\n      }\n\n      bl.append(chunk)\n\n      while (bl.length >= bytes) {\n        const data = bl.shallowSlice(0, bytes)\n        bl.consume(bytes)\n        bytes = yield data\n\n        // If we no longer want a specific byte length, we yield the rest now\n        if (!bytes) {\n          if (bl.length) {\n            bytes = yield bl\n            bl = new BufferList()\n          }\n          break // bytes is null and/or no more buffer to yield\n        }\n      }\n    }\n\n    // Consumer wants more bytes but the source has ended and our buffer\n    // is not big enough to satisfy.\n    if (bytes) {\n      throw Object.assign(\n        new Error(`stream ended before ${bytes} bytes became available`),\n        { code: 'ERR_UNDER_READ', buffer: bl }\n      )\n    }\n  })()\n\n  reader.next()\n  return reader\n}\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE3CC,MAAM,CAACC,OAAO,GAAGC,MAAM,IAAI;EACzB,MAAMC,MAAM,GAAI,mBAAoB;IAClC,IAAIC,KAAK,GAAG,KAAK,EAAC;IAClB,IAAIC,EAAE,GAAG,IAAIP,UAAU,CAAC,CAAC;IAEzB,WAAW,MAAMQ,KAAK,IAAIJ,MAAM,EAAE;MAChC,IAAI,CAACE,KAAK,EAAE;QACVA,KAAK,GAAG,MAAMC,EAAE,CAACE,MAAM,CAACD,KAAK,CAAC;QAC9BD,EAAE,GAAG,IAAIP,UAAU,CAAC,CAAC;QACrB;MACF;MAEAO,EAAE,CAACE,MAAM,CAACD,KAAK,CAAC;MAEhB,OAAOD,EAAE,CAACG,MAAM,IAAIJ,KAAK,EAAE;QACzB,MAAMK,IAAI,GAAGJ,EAAE,CAACK,YAAY,CAAC,CAAC,EAAEN,KAAK,CAAC;QACtCC,EAAE,CAACM,OAAO,CAACP,KAAK,CAAC;QACjBA,KAAK,GAAG,MAAMK,IAAI;;QAElB;QACA,IAAI,CAACL,KAAK,EAAE;UACV,IAAIC,EAAE,CAACG,MAAM,EAAE;YACbJ,KAAK,GAAG,MAAMC,EAAE;YAChBA,EAAE,GAAG,IAAIP,UAAU,CAAC,CAAC;UACvB;UACA,MAAK,CAAC;QACR;MACF;IACF;;IAEA;IACA;IACA,IAAIM,KAAK,EAAE;MACT,MAAMQ,MAAM,CAACC,MAAM,CACjB,IAAIC,KAAK,CAAC,uBAAuBV,KAAK,yBAAyB,CAAC,EAChE;QAAEW,IAAI,EAAE,gBAAgB;QAAEC,MAAM,EAAEX;MAAG,CACvC,CAAC;IACH;EACF,CAAC,CAAE,CAAC;EAEJF,MAAM,CAACc,IAAI,CAAC,CAAC;EACb,OAAOd,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}