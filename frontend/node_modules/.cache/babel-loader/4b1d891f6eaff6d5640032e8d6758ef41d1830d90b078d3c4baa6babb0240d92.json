{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst configure = require('./lib/configure');\nconst toUrlSearchParams = require('./lib/to-url-search-params');\nconst stat = require('./files/stat');\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  async function* ls(path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? new CID(path) : path}`;\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink(link) {\n      let hash = link.Hash;\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`;\n        const stats = await stat(opts)(ipfsPath);\n        hash = stats.cid;\n      }\n\n      /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: new CID(hash),\n        type: typeOf(link),\n        depth: link.Depth || 1\n      };\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8);\n      }\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        };\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs;\n        }\n      }\n      return entry;\n    }\n    const res = await api.post('ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (let result of res.ndjson()) {\n      result = result.Objects;\n      if (!result) {\n        throw new Error('expected .Objects in results');\n      }\n      result = result[0];\n      if (!result) {\n        throw new Error('expected one array in results.Objects');\n      }\n      const links = result.Links;\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links');\n      }\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result);\n        return;\n      }\n      yield* links.map(mapLink);\n    }\n  }\n  return ls;\n});\n\n/**\n * @param {any} link\n */\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n    case 2:\n      return 'file';\n    default:\n      return 'file';\n  }\n}","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","stat","module","exports","api","opts","ls","path","options","pathStr","Uint8Array","mapLink","link","hash","Hash","includes","ipfsPath","startsWith","stats","cid","entry","name","Name","size","Size","type","typeOf","depth","Depth","Mode","mode","parseInt","Mtime","undefined","mtime","secs","MtimeNsecs","nsecs","res","post","timeout","signal","searchParams","arg","headers","result","ndjson","Objects","Error","links","Links","Array","isArray","length","map","Type"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/ls.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst stat = require('./files/stat')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? new CID(path) : path}`\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await stat(opts)(ipfsPath)\n\n        hash = stats.cid\n      }\n\n      /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: new CID(hash),\n        type: typeOf(link),\n        depth: link.Depth || 1\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n  return ls\n})\n\n/**\n * @param {any} link\n */\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}