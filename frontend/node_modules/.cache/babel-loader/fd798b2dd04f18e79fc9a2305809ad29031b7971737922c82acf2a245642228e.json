{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst util = require('./util');\n\n/**\n * Resolves a path within a PB block.\n *\n * If the path resolves half-way to a link, then the `remainderPath` is the part\n * after the link that can be used for further resolving\n *\n * Returns the value or a link and the partial missing path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n * @param {string} [path='/'] - Path that should be resolved\n */\nexports.resolve = (binaryBlob, path = '/') => {\n  let node = util.deserialize(binaryBlob);\n  const parts = path.split('/').filter(Boolean);\n  while (parts.length) {\n    const key = parts.shift();\n    // @ts-ignore\n    if (node[key] === undefined) {\n      // There might be a matching named link\n      for (const link of node.Links) {\n        if (link.Name === key) {\n          return {\n            value: link.Hash,\n            remainderPath: parts.join('/')\n          };\n        }\n      }\n\n      // There wasn't even a matching named link\n      throw new Error(`Object has no property '${key}'`);\n    }\n\n    // @ts-ignore\n    node = node[key];\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      };\n    }\n  }\n  return {\n    value: node,\n    remainderPath: ''\n  };\n};\n\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n * @yields {string} - A single path\n */\nexports.tree = function* (binaryBlob) {\n  const node = util.deserialize(binaryBlob);\n\n  // There is always a `Data` and `Links` property\n  yield 'Data';\n  yield 'Links';\n  for (let ii = 0; ii < node.Links.length; ii++) {\n    yield `Links/${ii}`;\n    yield `Links/${ii}/Name`;\n    yield `Links/${ii}/Tsize`;\n    yield `Links/${ii}/Hash`;\n  }\n};","map":{"version":3,"names":["CID","require","util","exports","resolve","binaryBlob","path","node","deserialize","parts","split","filter","Boolean","length","key","shift","undefined","link","Links","Name","value","Hash","remainderPath","join","Error","isCID","tree","ii"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipld-dag-pb/src/resolver.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\n\nconst util = require('./util')\n\n/**\n * Resolves a path within a PB block.\n *\n * If the path resolves half-way to a link, then the `remainderPath` is the part\n * after the link that can be used for further resolving\n *\n * Returns the value or a link and the partial missing path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n * @param {string} [path='/'] - Path that should be resolved\n */\nexports.resolve = (binaryBlob, path = '/') => {\n  let node = util.deserialize(binaryBlob)\n\n  const parts = path.split('/').filter(Boolean)\n  while (parts.length) {\n    const key = parts.shift()\n    // @ts-ignore\n    if (node[key] === undefined) {\n      // There might be a matching named link\n      for (const link of node.Links) {\n        if (link.Name === key) {\n          return {\n            value: link.Hash,\n            remainderPath: parts.join('/')\n          }\n        }\n      }\n\n      // There wasn't even a matching named link\n      throw new Error(`Object has no property '${key}'`)\n    }\n\n    // @ts-ignore\n    node = node[key]\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      }\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  }\n}\n\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n * @yields {string} - A single path\n */\nexports.tree = function * (binaryBlob) {\n  const node = util.deserialize(binaryBlob)\n\n  // There is always a `Data` and `Links` property\n  yield 'Data'\n  yield 'Links'\n  for (let ii = 0; ii < node.Links.length; ii++) {\n    yield `Links/${ii}`\n    yield `Links/${ii}/Name`\n    yield `Links/${ii}/Tsize`\n    yield `Links/${ii}/Hash`\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAE3B,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,OAAO,CAACC,OAAO,GAAG,CAACC,UAAU,EAAEC,IAAI,GAAG,GAAG,KAAK;EAC5C,IAAIC,IAAI,GAAGL,IAAI,CAACM,WAAW,CAACH,UAAU,CAAC;EAEvC,MAAMI,KAAK,GAAGH,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;EAC7C,OAAOH,KAAK,CAACI,MAAM,EAAE;IACnB,MAAMC,GAAG,GAAGL,KAAK,CAACM,KAAK,CAAC,CAAC;IACzB;IACA,IAAIR,IAAI,CAACO,GAAG,CAAC,KAAKE,SAAS,EAAE;MAC3B;MACA,KAAK,MAAMC,IAAI,IAAIV,IAAI,CAACW,KAAK,EAAE;QAC7B,IAAID,IAAI,CAACE,IAAI,KAAKL,GAAG,EAAE;UACrB,OAAO;YACLM,KAAK,EAAEH,IAAI,CAACI,IAAI;YAChBC,aAAa,EAAEb,KAAK,CAACc,IAAI,CAAC,GAAG;UAC/B,CAAC;QACH;MACF;;MAEA;MACA,MAAM,IAAIC,KAAK,CAAC,2BAA2BV,GAAG,GAAG,CAAC;IACpD;;IAEA;IACAP,IAAI,GAAGA,IAAI,CAACO,GAAG,CAAC;IAChB,IAAId,GAAG,CAACyB,KAAK,CAAClB,IAAI,CAAC,EAAE;MACnB,OAAO;QACLa,KAAK,EAAEb,IAAI;QACXe,aAAa,EAAEb,KAAK,CAACc,IAAI,CAAC,GAAG;MAC/B,CAAC;IACH;EACF;EAEA,OAAO;IACLH,KAAK,EAAEb,IAAI;IACXe,aAAa,EAAE;EACjB,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAnB,OAAO,CAACuB,IAAI,GAAG,WAAYrB,UAAU,EAAE;EACrC,MAAME,IAAI,GAAGL,IAAI,CAACM,WAAW,CAACH,UAAU,CAAC;;EAEzC;EACA,MAAM,MAAM;EACZ,MAAM,OAAO;EACb,KAAK,IAAIsB,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGpB,IAAI,CAACW,KAAK,CAACL,MAAM,EAAEc,EAAE,EAAE,EAAE;IAC7C,MAAM,SAASA,EAAE,EAAE;IACnB,MAAM,SAASA,EAAE,OAAO;IACxB,MAAM,SAASA,EAAE,QAAQ;IACzB,MAAM,SAASA,EAAE,OAAO;EAC1B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}