{"ast":null,"code":"'use strict';\n\nconst sha3 = require('js-sha3');\n// @ts-ignore - no types available\nconst mur = require('murmurhash3js-revisited');\nconst {\n  factory: sha\n} = require('./sha');\nconst {\n  fromNumberTo32BitBuf\n} = require('./utils');\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n// eslint-disable-next-line\n/**\n * @param {string} algorithm\n * @returns {import('./types').Digest}\n */\nconst hash = algorithm => async data => {\n  switch (algorithm) {\n    case 'sha3-224':\n      return new Uint8Array(sha3.sha3_224.arrayBuffer(data));\n    case 'sha3-256':\n      return new Uint8Array(sha3.sha3_256.arrayBuffer(data));\n    case 'sha3-384':\n      return new Uint8Array(sha3.sha3_384.arrayBuffer(data));\n    case 'sha3-512':\n      return new Uint8Array(sha3.sha3_512.arrayBuffer(data));\n    case 'shake-128':\n      return new Uint8Array(sha3.shake128.create(128).update(data).arrayBuffer());\n    case 'shake-256':\n      return new Uint8Array(sha3.shake256.create(256).update(data).arrayBuffer());\n    case 'keccak-224':\n      return new Uint8Array(sha3.keccak224.arrayBuffer(data));\n    case 'keccak-256':\n      return new Uint8Array(sha3.keccak256.arrayBuffer(data));\n    case 'keccak-384':\n      return new Uint8Array(sha3.keccak384.arrayBuffer(data));\n    case 'keccak-512':\n      return new Uint8Array(sha3.keccak512.arrayBuffer(data));\n    case 'murmur3-128':\n      return uint8ArrayFromString(mur.x64.hash128(data), 'base16');\n    case 'murmur3-32':\n      return fromNumberTo32BitBuf(mur.x86.hash32(data));\n    default:\n      throw new TypeError(`${algorithm} is not a supported algorithm`);\n  }\n};\n\n/** @type {import('./types').Digest} */\nconst identity = data => data;\nmodule.exports = {\n  identity,\n  sha1: sha('sha1'),\n  sha2256: sha('sha2-256'),\n  sha2512: sha('sha2-512'),\n  dblSha2256: sha('dbl-sha2-256'),\n  sha3224: hash('sha3-224'),\n  sha3256: hash('sha3-256'),\n  sha3384: hash('sha3-384'),\n  sha3512: hash('sha3-512'),\n  shake128: hash('shake-128'),\n  shake256: hash('shake-256'),\n  keccak224: hash('keccak-224'),\n  keccak256: hash('keccak-256'),\n  keccak384: hash('keccak-384'),\n  keccak512: hash('keccak-512'),\n  murmur3128: hash('murmur3-128'),\n  murmur332: hash('murmur3-32'),\n  addBlake: require('./blake')\n};","map":{"version":3,"names":["sha3","require","mur","factory","sha","fromNumberTo32BitBuf","fromString","uint8ArrayFromString","hash","algorithm","data","Uint8Array","sha3_224","arrayBuffer","sha3_256","sha3_384","sha3_512","shake128","create","update","shake256","keccak224","keccak256","keccak384","keccak512","x64","hash128","x86","hash32","TypeError","identity","module","exports","sha1","sha2256","sha2512","dblSha2256","sha3224","sha3256","sha3384","sha3512","murmur3128","murmur332","addBlake"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/multihashing-async/src/crypto.js"],"sourcesContent":["'use strict'\n\nconst sha3 = require('js-sha3')\n// @ts-ignore - no types available\nconst mur = require('murmurhash3js-revisited')\nconst { factory: sha } = require('./sha')\nconst { fromNumberTo32BitBuf } = require('./utils')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n// eslint-disable-next-line\n/**\n * @param {string} algorithm\n * @returns {import('./types').Digest}\n */\nconst hash = (algorithm) => async (data) => {\n  switch (algorithm) {\n    case 'sha3-224':\n      return new Uint8Array(sha3.sha3_224.arrayBuffer(data))\n    case 'sha3-256':\n      return new Uint8Array(sha3.sha3_256.arrayBuffer(data))\n    case 'sha3-384':\n      return new Uint8Array(sha3.sha3_384.arrayBuffer(data))\n    case 'sha3-512':\n      return new Uint8Array(sha3.sha3_512.arrayBuffer(data))\n    case 'shake-128':\n      return new Uint8Array(sha3.shake128.create(128).update(data).arrayBuffer())\n    case 'shake-256':\n      return new Uint8Array(sha3.shake256.create(256).update(data).arrayBuffer())\n    case 'keccak-224':\n      return new Uint8Array(sha3.keccak224.arrayBuffer(data))\n    case 'keccak-256':\n      return new Uint8Array(sha3.keccak256.arrayBuffer(data))\n    case 'keccak-384':\n      return new Uint8Array(sha3.keccak384.arrayBuffer(data))\n    case 'keccak-512':\n      return new Uint8Array(sha3.keccak512.arrayBuffer(data))\n    case 'murmur3-128':\n      return uint8ArrayFromString(mur.x64.hash128(data), 'base16')\n    case 'murmur3-32':\n      return fromNumberTo32BitBuf(mur.x86.hash32(data))\n\n    default:\n      throw new TypeError(`${algorithm} is not a supported algorithm`)\n  }\n}\n\n/** @type {import('./types').Digest} */\nconst identity = data => data\n\nmodule.exports = {\n  identity,\n  sha1: sha('sha1'),\n  sha2256: sha('sha2-256'),\n  sha2512: sha('sha2-512'),\n  dblSha2256: sha('dbl-sha2-256'),\n  sha3224: hash('sha3-224'),\n  sha3256: hash('sha3-256'),\n  sha3384: hash('sha3-384'),\n  sha3512: hash('sha3-512'),\n  shake128: hash('shake-128'),\n  shake256: hash('shake-256'),\n  keccak224: hash('keccak-224'),\n  keccak256: hash('keccak-256'),\n  keccak384: hash('keccak-384'),\n  keccak512: hash('keccak-512'),\n  murmur3128: hash('murmur3-128'),\n  murmur332: hash('murmur3-32'),\n  addBlake: require('./blake')\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}