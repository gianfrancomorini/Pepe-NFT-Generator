{"ast":null,"code":"const {\n  Buffer\n} = require('buffer');\nconst BufferList = require('bl/BufferList');\nconst ZERO_OFFSET = '0'.charCodeAt(0);\nconst USTAR_MAGIC = Buffer.from('ustar\\x00', 'binary');\nconst GNU_MAGIC = Buffer.from('ustar\\x20', 'binary');\nconst GNU_VER = Buffer.from('\\x20\\x00', 'binary');\nconst MAGIC_OFFSET = 257;\nconst VERSION_OFFSET = 263;\nconst clamp = function (index, len, defaultValue) {\n  if (typeof index !== 'number') return defaultValue;\n  index = ~~index; // Coerce to integer.\n  if (index >= len) return len;\n  if (index >= 0) return index;\n  index += len;\n  if (index >= 0) return index;\n  return 0;\n};\nconst toType = function (flag) {\n  switch (flag) {\n    case 0:\n      return 'file';\n    case 1:\n      return 'link';\n    case 2:\n      return 'symlink';\n    case 3:\n      return 'character-device';\n    case 4:\n      return 'block-device';\n    case 5:\n      return 'directory';\n    case 6:\n      return 'fifo';\n    case 7:\n      return 'contiguous-file';\n    case 72:\n      return 'pax-header';\n    case 55:\n      return 'pax-global-header';\n    case 27:\n      return 'gnu-long-link-path';\n    case 28:\n    case 30:\n      return 'gnu-long-path';\n  }\n  return null;\n};\nconst indexOf = function (block, num, offset, end) {\n  for (; offset < end; offset++) {\n    if (block.get(offset) === num) return offset;\n  }\n  return end;\n};\nconst cksum = function (block) {\n  let sum = 8 * 32;\n  for (let i = 0; i < 148; i++) sum += block.get(i);\n  for (let j = 156; j < 512; j++) sum += block.get(j);\n  return sum;\n};\n\n/* Copied from the node-tar repo and modified to meet\n * tar-stream coding standard.\n *\n * Source: https://github.com/npm/node-tar/blob/51b6627a1f357d2eb433e7378e5f05e83b7aa6cd/lib/header.js#L349\n */\nfunction parse256(buf) {\n  // first byte MUST be either 80 or FF\n  // 80 for positive, FF for 2's comp\n  let positive;\n  if (buf.get(0) === 0x80) positive = true;else if (buf.get(0) === 0xFF) positive = false;else return null;\n\n  // build up a base-256 tuple from the least sig to the highest\n  let zero = false;\n  const tuple = [];\n  for (let i = buf.length - 1; i > 0; i--) {\n    const byte = buf.get(i);\n    if (positive) tuple.push(byte);else if (zero && byte === 0) tuple.push(0);else if (zero) {\n      zero = false;\n      tuple.push(0x100 - byte);\n    } else tuple.push(0xFF - byte);\n  }\n  let sum = 0;\n  const l = tuple.length;\n  for (let i = 0; i < l; i++) {\n    sum += tuple[i] * Math.pow(256, i);\n  }\n  return positive ? sum : -1 * sum;\n}\nconst decodeOct = function (val, offset, length) {\n  val = val.shallowSlice(offset, offset + length);\n  offset = 0;\n\n  // If prefixed with 0x80 then parse as a base-256 integer\n  if (val.get(offset) & 0x80) {\n    return parse256(val);\n  } else {\n    // Older versions of tar can prefix with spaces\n    while (offset < val.length && val.get(offset) === 32) offset++;\n    const end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length);\n    while (offset < end && val.get(offset) === 0) offset++;\n    if (end === offset) return 0;\n    return parseInt(val.shallowSlice(offset, end).toString(), 8);\n  }\n};\nconst decodeStr = function (val, offset, length, encoding) {\n  return val.shallowSlice(offset, indexOf(val, 0, offset, offset + length)).toString(encoding);\n};\nexports.decodeLongPath = function (buf, encoding) {\n  buf = BufferList.isBufferList(buf) ? buf : new BufferList(buf);\n  return decodeStr(buf, 0, buf.length, encoding);\n};\nexports.decodePax = function (buf) {\n  buf = BufferList.isBufferList(buf) ? buf : new BufferList(buf);\n  const result = {};\n  while (buf.length) {\n    let i = 0;\n    while (i < buf.length && buf.get(i) !== 32) i++;\n    const len = parseInt(buf.shallowSlice(0, i).toString(), 10);\n    if (!len) return result;\n    const b = buf.shallowSlice(i + 1, len - 1).toString();\n    const keyIndex = b.indexOf('=');\n    if (keyIndex === -1) return result;\n    result[b.slice(0, keyIndex)] = b.slice(keyIndex + 1);\n    buf = buf.shallowSlice(len);\n  }\n  return result;\n};\nexports.decode = function (buf, filenameEncoding) {\n  buf = BufferList.isBufferList(buf) ? buf : new BufferList(buf);\n  let typeflag = buf.get(156) === 0 ? 0 : buf.get(156) - ZERO_OFFSET;\n  let name = decodeStr(buf, 0, 100, filenameEncoding);\n  const mode = decodeOct(buf, 100, 8);\n  const uid = decodeOct(buf, 108, 8);\n  const gid = decodeOct(buf, 116, 8);\n  const size = decodeOct(buf, 124, 12);\n  const mtime = decodeOct(buf, 136, 12);\n  const type = toType(typeflag);\n  const linkname = buf.get(157) === 0 ? null : decodeStr(buf, 157, 100, filenameEncoding);\n  const uname = decodeStr(buf, 265, 32);\n  const gname = decodeStr(buf, 297, 32);\n  const devmajor = decodeOct(buf, 329, 8);\n  const devminor = decodeOct(buf, 337, 8);\n  const c = cksum(buf);\n\n  // checksum is still initial value if header was null.\n  if (c === 8 * 32) return null;\n\n  // valid checksum\n  if (c !== decodeOct(buf, 148, 8)) throw new Error('Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?');\n  if (USTAR_MAGIC.compare(buf.slice(MAGIC_OFFSET, MAGIC_OFFSET + 6)) === 0) {\n    // ustar (posix) format.\n    // prepend prefix, if present.\n    if (buf.get(345)) name = decodeStr(buf, 345, 155, filenameEncoding) + '/' + name;\n  } else if (GNU_MAGIC.compare(buf.slice(MAGIC_OFFSET, MAGIC_OFFSET + 6)) === 0 && GNU_VER.compare(buf.slice(VERSION_OFFSET, VERSION_OFFSET + 2)) === 0) {\n    // 'gnu'/'oldgnu' format. Similar to ustar, but has support for incremental and\n    // multi-volume tarballs.\n  } else {\n    throw new Error('Invalid tar header: unknown format.');\n  }\n\n  // to support old tar versions that use trailing / to indicate dirs\n  if (typeflag === 0 && name && name[name.length - 1] === '/') typeflag = 5;\n  return {\n    name: name,\n    mode: mode,\n    uid: uid,\n    gid: gid,\n    size: size,\n    mtime: new Date(1000 * mtime),\n    type: type,\n    linkname: linkname,\n    uname: uname,\n    gname: gname,\n    devmajor: devmajor,\n    devminor: devminor\n  };\n};","map":{"version":3,"names":["Buffer","require","BufferList","ZERO_OFFSET","charCodeAt","USTAR_MAGIC","from","GNU_MAGIC","GNU_VER","MAGIC_OFFSET","VERSION_OFFSET","clamp","index","len","defaultValue","toType","flag","indexOf","block","num","offset","end","get","cksum","sum","i","j","parse256","buf","positive","zero","tuple","length","byte","push","l","Math","pow","decodeOct","val","shallowSlice","parseInt","toString","decodeStr","encoding","exports","decodeLongPath","isBufferList","decodePax","result","b","keyIndex","slice","decode","filenameEncoding","typeflag","name","mode","uid","gid","size","mtime","type","linkname","uname","gname","devmajor","devminor","c","Error","compare","Date"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/it-tar/extract-headers.js"],"sourcesContent":["const { Buffer } = require('buffer')\nconst BufferList = require('bl/BufferList')\n\nconst ZERO_OFFSET = '0'.charCodeAt(0)\nconst USTAR_MAGIC = Buffer.from('ustar\\x00', 'binary')\nconst GNU_MAGIC = Buffer.from('ustar\\x20', 'binary')\nconst GNU_VER = Buffer.from('\\x20\\x00', 'binary')\nconst MAGIC_OFFSET = 257\nconst VERSION_OFFSET = 263\n\nconst clamp = function (index, len, defaultValue) {\n  if (typeof index !== 'number') return defaultValue\n  index = ~~index // Coerce to integer.\n  if (index >= len) return len\n  if (index >= 0) return index\n  index += len\n  if (index >= 0) return index\n  return 0\n}\n\nconst toType = function (flag) {\n  switch (flag) {\n    case 0:\n      return 'file'\n    case 1:\n      return 'link'\n    case 2:\n      return 'symlink'\n    case 3:\n      return 'character-device'\n    case 4:\n      return 'block-device'\n    case 5:\n      return 'directory'\n    case 6:\n      return 'fifo'\n    case 7:\n      return 'contiguous-file'\n    case 72:\n      return 'pax-header'\n    case 55:\n      return 'pax-global-header'\n    case 27:\n      return 'gnu-long-link-path'\n    case 28:\n    case 30:\n      return 'gnu-long-path'\n  }\n\n  return null\n}\n\nconst indexOf = function (block, num, offset, end) {\n  for (; offset < end; offset++) {\n    if (block.get(offset) === num) return offset\n  }\n  return end\n}\n\nconst cksum = function (block) {\n  let sum = 8 * 32\n  for (let i = 0; i < 148; i++) sum += block.get(i)\n  for (let j = 156; j < 512; j++) sum += block.get(j)\n  return sum\n}\n\n/* Copied from the node-tar repo and modified to meet\n * tar-stream coding standard.\n *\n * Source: https://github.com/npm/node-tar/blob/51b6627a1f357d2eb433e7378e5f05e83b7aa6cd/lib/header.js#L349\n */\nfunction parse256 (buf) {\n  // first byte MUST be either 80 or FF\n  // 80 for positive, FF for 2's comp\n  let positive\n  if (buf.get(0) === 0x80) positive = true\n  else if (buf.get(0) === 0xFF) positive = false\n  else return null\n\n  // build up a base-256 tuple from the least sig to the highest\n  let zero = false\n  const tuple = []\n  for (let i = buf.length - 1; i > 0; i--) {\n    const byte = buf.get(i)\n    if (positive) tuple.push(byte)\n    else if (zero && byte === 0) tuple.push(0)\n    else if (zero) {\n      zero = false\n      tuple.push(0x100 - byte)\n    } else tuple.push(0xFF - byte)\n  }\n\n  let sum = 0\n  const l = tuple.length\n  for (let i = 0; i < l; i++) {\n    sum += tuple[i] * Math.pow(256, i)\n  }\n\n  return positive ? sum : -1 * sum\n}\n\nconst decodeOct = function (val, offset, length) {\n  val = val.shallowSlice(offset, offset + length)\n  offset = 0\n\n  // If prefixed with 0x80 then parse as a base-256 integer\n  if (val.get(offset) & 0x80) {\n    return parse256(val)\n  } else {\n    // Older versions of tar can prefix with spaces\n    while (offset < val.length && val.get(offset) === 32) offset++\n    const end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length)\n    while (offset < end && val.get(offset) === 0) offset++\n    if (end === offset) return 0\n    return parseInt(val.shallowSlice(offset, end).toString(), 8)\n  }\n}\n\nconst decodeStr = function (val, offset, length, encoding) {\n  return val.shallowSlice(offset, indexOf(val, 0, offset, offset + length)).toString(encoding)\n}\n\nexports.decodeLongPath = function (buf, encoding) {\n  buf = BufferList.isBufferList(buf) ? buf : new BufferList(buf)\n  return decodeStr(buf, 0, buf.length, encoding)\n}\n\nexports.decodePax = function (buf) {\n  buf = BufferList.isBufferList(buf) ? buf : new BufferList(buf)\n  const result = {}\n\n  while (buf.length) {\n    let i = 0\n    while (i < buf.length && buf.get(i) !== 32) i++\n    const len = parseInt(buf.shallowSlice(0, i).toString(), 10)\n    if (!len) return result\n\n    const b = buf.shallowSlice(i + 1, len - 1).toString()\n    const keyIndex = b.indexOf('=')\n    if (keyIndex === -1) return result\n    result[b.slice(0, keyIndex)] = b.slice(keyIndex + 1)\n\n    buf = buf.shallowSlice(len)\n  }\n\n  return result\n}\n\nexports.decode = function (buf, filenameEncoding) {\n  buf = BufferList.isBufferList(buf) ? buf : new BufferList(buf)\n  let typeflag = buf.get(156) === 0 ? 0 : buf.get(156) - ZERO_OFFSET\n\n  let name = decodeStr(buf, 0, 100, filenameEncoding)\n  const mode = decodeOct(buf, 100, 8)\n  const uid = decodeOct(buf, 108, 8)\n  const gid = decodeOct(buf, 116, 8)\n  const size = decodeOct(buf, 124, 12)\n  const mtime = decodeOct(buf, 136, 12)\n  const type = toType(typeflag)\n  const linkname = buf.get(157) === 0 ? null : decodeStr(buf, 157, 100, filenameEncoding)\n  const uname = decodeStr(buf, 265, 32)\n  const gname = decodeStr(buf, 297, 32)\n  const devmajor = decodeOct(buf, 329, 8)\n  const devminor = decodeOct(buf, 337, 8)\n\n  const c = cksum(buf)\n\n  // checksum is still initial value if header was null.\n  if (c === 8 * 32) return null\n\n  // valid checksum\n  if (c !== decodeOct(buf, 148, 8)) throw new Error('Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?')\n\n  if (USTAR_MAGIC.compare(buf.slice(MAGIC_OFFSET, MAGIC_OFFSET + 6)) === 0) {\n    // ustar (posix) format.\n    // prepend prefix, if present.\n    if (buf.get(345)) name = decodeStr(buf, 345, 155, filenameEncoding) + '/' + name\n  } else if (GNU_MAGIC.compare(buf.slice(MAGIC_OFFSET, MAGIC_OFFSET + 6)) === 0 &&\n             GNU_VER.compare(buf.slice(VERSION_OFFSET, VERSION_OFFSET + 2)) === 0) {\n    // 'gnu'/'oldgnu' format. Similar to ustar, but has support for incremental and\n    // multi-volume tarballs.\n  } else {\n    throw new Error('Invalid tar header: unknown format.')\n  }\n\n  // to support old tar versions that use trailing / to indicate dirs\n  if (typeflag === 0 && name && name[name.length - 1] === '/') typeflag = 5\n\n  return {\n    name: name,\n    mode: mode,\n    uid: uid,\n    gid: gid,\n    size: size,\n    mtime: new Date(1000 * mtime),\n    type: type,\n    linkname: linkname,\n    uname: uname,\n    gname: gname,\n    devmajor: devmajor,\n    devminor: devminor\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}