{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  async function* rm(cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid];\n    }\n    const res = await api.post('block/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => new CID(cid).toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed);\n    }\n  }\n  return rm;\n});\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface(removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: new CID(removed.Hash)\n  };\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n  return out;\n}","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","rm","cid","options","Array","isArray","res","post","timeout","signal","searchParams","arg","map","toString","headers","removed","ndjson","toCoreInterface","out","Hash","Error","error"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/block/rm.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => new CID(cid).toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface (removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: new CID(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,EAAEA,CAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACtC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,EAAE;MACvBA,GAAG,GAAG,CAACA,GAAG,CAAC;IACb;IAEA,MAAMI,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,UAAU,EAAE;MACrCC,OAAO,EAAEL,OAAO,CAACK,OAAO;MACxBC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EAAEb,iBAAiB,CAAC;QAC9Bc,GAAG,EAAET,GAAG,CAACU,GAAG,CAACV,GAAG,IAAI,IAAIR,GAAG,CAACQ,GAAG,CAAC,CAACW,QAAQ,CAAC,CAAC,CAAC;QAC5C,iBAAiB,EAAE,IAAI;QACvB,GAAGV;MACL,CAAC,CAAC;MACFW,OAAO,EAAEX,OAAO,CAACW;IACnB,CAAC,CAAC;IAEF,WAAW,MAAMC,OAAO,IAAIT,GAAG,CAACU,MAAM,CAAC,CAAC,EAAE;MACxC,MAAMC,eAAe,CAACF,OAAO,CAAC;IAChC;EACF;EAEA,OAAOd,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASgB,eAAeA,CAAEF,OAAO,EAAE;EACjC;EACA,MAAMG,GAAG,GAAG;IACVhB,GAAG,EAAE,IAAIR,GAAG,CAACqB,OAAO,CAACI,IAAI;EAC3B,CAAC;EAED,IAAIJ,OAAO,CAACK,KAAK,EAAE;IACjBF,GAAG,CAACG,KAAK,GAAG,IAAID,KAAK,CAACL,OAAO,CAACK,KAAK,CAAC;EACtC;EAEA,OAAOF,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}