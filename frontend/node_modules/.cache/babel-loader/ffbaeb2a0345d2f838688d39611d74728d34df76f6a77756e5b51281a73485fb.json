{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst {\n  version\n} = require('../package.json');\nconst blockSymbol = Symbol.for('@ipld/js-ipld-block/block');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\n\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @example\n * const block = new Block(Uint8Array.from([0, 1, 2, 3]), new CID('...'))\n */\nclass Block {\n  /**\n   * @param {Uint8Array} data - The data to be stored in the block as a Uint8Array.\n   * @param {CID} cid - The cid of the data\n   */\n  constructor(data, cid) {\n    if (!data || !(data instanceof Uint8Array)) {\n      throw new Error('first argument  must be a Uint8Array');\n    }\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID');\n    }\n    this.data = data;\n    this.cid = cid;\n    Object.defineProperties(this, {\n      data: readonly,\n      cid: readonly\n    });\n  }\n\n  /**\n   * The data of this block.\n   *\n   * @deprecated\n   * @type {Uint8Array}\n   */\n  get _data() {\n    deprecateData();\n    return this.data;\n  }\n\n  /**\n   * The cid of the data this block represents.\n   *\n   * @deprecated\n   * @type {CID}\n   */\n  get _cid() {\n    deprecateCID();\n    return this.cid;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Block';\n  }\n  get [blockSymbol]() {\n    return true;\n  }\n\n  /**\n   * Check if the given value is a Block.\n   *\n   * @param {any} other\n   * @returns {other is Block}\n   */\n  static isBlock(other) {\n    return Boolean(other && other[blockSymbol]);\n  }\n}\n\n/**\n * @param {RegExp} range\n * @param {string} message\n * @returns {() => void}\n */\nconst deprecate = (range, message) => {\n  let warned = false;\n  return () => {\n    if (range.test(version)) {\n      if (!warned) {\n        warned = true;\n        // eslint-disable-next-line no-console\n        console.warn(message);\n      }\n    } else {\n      throw new Error(message);\n    }\n  };\n};\nconst deprecateCID = deprecate(/^0\\.10|^0\\.11/, 'block._cid is deprecated and will be removed in 0.12 release. Please use block.cid instead');\nconst deprecateData = deprecate(/^0\\.10|^0.11/, 'block._data is deprecated and will be removed in 0.12 release. Please use block.data instead');\nmodule.exports = Block;","map":{"version":3,"names":["CID","require","version","blockSymbol","Symbol","for","readonly","writable","configurable","enumerable","Block","constructor","data","cid","Uint8Array","Error","isCID","Object","defineProperties","_data","deprecateData","_cid","deprecateCID","toStringTag","isBlock","other","Boolean","deprecate","range","message","warned","test","console","warn","module","exports"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipld-block/src/index.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\n\nconst { version } = require('../package.json')\nconst blockSymbol = Symbol.for('@ipld/js-ipld-block/block')\nconst readonly = { writable: false, configurable: false, enumerable: true }\n\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @example\n * const block = new Block(Uint8Array.from([0, 1, 2, 3]), new CID('...'))\n */\nclass Block {\n  /**\n   * @param {Uint8Array} data - The data to be stored in the block as a Uint8Array.\n   * @param {CID} cid - The cid of the data\n   */\n  constructor (data, cid) {\n    if (!data || !(data instanceof Uint8Array)) {\n      throw new Error('first argument  must be a Uint8Array')\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID')\n    }\n\n    this.data = data\n    this.cid = cid\n\n    Object.defineProperties(this, {\n      data: readonly,\n      cid: readonly\n    })\n  }\n\n  /**\n   * The data of this block.\n   *\n   * @deprecated\n   * @type {Uint8Array}\n   */\n  get _data () {\n    deprecateData()\n    return this.data\n  }\n\n  /**\n   * The cid of the data this block represents.\n   *\n   * @deprecated\n   * @type {CID}\n   */\n  get _cid () {\n    deprecateCID()\n    return this.cid\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Block'\n  }\n\n  get [blockSymbol] () {\n    return true\n  }\n\n  /**\n   * Check if the given value is a Block.\n   *\n   * @param {any} other\n   * @returns {other is Block}\n   */\n  static isBlock (other) {\n    return Boolean(other && other[blockSymbol])\n  }\n}\n\n/**\n * @param {RegExp} range\n * @param {string} message\n * @returns {() => void}\n */\nconst deprecate = (range, message) => {\n  let warned = false\n  return () => {\n    if (range.test(version)) {\n      if (!warned) {\n        warned = true\n        // eslint-disable-next-line no-console\n        console.warn(message)\n      }\n    } else {\n      throw new Error(message)\n    }\n  }\n}\n\nconst deprecateCID = deprecate(/^0\\.10|^0\\.11/, 'block._cid is deprecated and will be removed in 0.12 release. Please use block.cid instead')\nconst deprecateData = deprecate(/^0\\.10|^0.11/, 'block._data is deprecated and will be removed in 0.12 release. Please use block.data instead')\n\nmodule.exports = Block\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAE3B,MAAM;EAAEC;AAAQ,CAAC,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAC9C,MAAME,WAAW,GAAGC,MAAM,CAACC,GAAG,CAAC,2BAA2B,CAAC;AAC3D,MAAMC,QAAQ,GAAG;EAAEC,QAAQ,EAAE,KAAK;EAAEC,YAAY,EAAE,KAAK;EAAEC,UAAU,EAAE;AAAK,CAAC;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,CAAC;EACV;AACF;AACA;AACA;EACEC,WAAWA,CAAEC,IAAI,EAAEC,GAAG,EAAE;IACtB,IAAI,CAACD,IAAI,IAAI,EAAEA,IAAI,YAAYE,UAAU,CAAC,EAAE;MAC1C,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;IACzD;IAEA,IAAI,CAACF,GAAG,IAAI,CAACb,GAAG,CAACgB,KAAK,CAACH,GAAG,CAAC,EAAE;MAC3B,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;IAClD;IAEA,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,GAAG,GAAGA,GAAG;IAEdI,MAAM,CAACC,gBAAgB,CAAC,IAAI,EAAE;MAC5BN,IAAI,EAAEN,QAAQ;MACdO,GAAG,EAAEP;IACP,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIa,KAAKA,CAAA,EAAI;IACXC,aAAa,CAAC,CAAC;IACf,OAAO,IAAI,CAACR,IAAI;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIS,IAAIA,CAAA,EAAI;IACVC,YAAY,CAAC,CAAC;IACd,OAAO,IAAI,CAACT,GAAG;EACjB;EAEA,KAAKT,MAAM,CAACmB,WAAW,IAAK;IAC1B,OAAO,OAAO;EAChB;EAEA,KAAKpB,WAAW,IAAK;IACnB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOqB,OAAOA,CAAEC,KAAK,EAAE;IACrB,OAAOC,OAAO,CAACD,KAAK,IAAIA,KAAK,CAACtB,WAAW,CAAC,CAAC;EAC7C;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMwB,SAAS,GAAGA,CAACC,KAAK,EAAEC,OAAO,KAAK;EACpC,IAAIC,MAAM,GAAG,KAAK;EAClB,OAAO,MAAM;IACX,IAAIF,KAAK,CAACG,IAAI,CAAC7B,OAAO,CAAC,EAAE;MACvB,IAAI,CAAC4B,MAAM,EAAE;QACXA,MAAM,GAAG,IAAI;QACb;QACAE,OAAO,CAACC,IAAI,CAACJ,OAAO,CAAC;MACvB;IACF,CAAC,MAAM;MACL,MAAM,IAAId,KAAK,CAACc,OAAO,CAAC;IAC1B;EACF,CAAC;AACH,CAAC;AAED,MAAMP,YAAY,GAAGK,SAAS,CAAC,eAAe,EAAE,4FAA4F,CAAC;AAC7I,MAAMP,aAAa,GAAGO,SAAS,CAAC,cAAc,EAAE,8FAA8F,CAAC;AAE/IO,MAAM,CAACC,OAAO,GAAGzB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}