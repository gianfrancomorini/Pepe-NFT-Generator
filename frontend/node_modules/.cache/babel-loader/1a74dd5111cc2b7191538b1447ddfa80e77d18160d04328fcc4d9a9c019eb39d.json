{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst multipartRequest = require('../../lib/multipart-request');\nconst configure = require('../../lib/configure');\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\nconst abortSignal = require('../../lib/abort-signal');\nconst {\n  AbortController\n} = require('native-abort-controller');\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"appendData\"]}\n   */\n  async function appendData(cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('object/patch/append-data', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        ...options\n      }),\n      ...(await multipartRequest(data, controller, options.headers))\n    });\n    const {\n      Hash\n    } = await res.json();\n    return new CID(Hash);\n  }\n  return appendData;\n});","map":{"version":3,"names":["CID","require","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","appendData","cid","data","options","controller","signal","res","post","timeout","searchParams","arg","Uint8Array","headers","Hash","json"],"sources":["/Users/gianfrancomorini/Pepe-NFT-Generator/node_modules/ipfs-http-client/src/object/patch/append-data.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multipartRequest = require('../../lib/multipart-request')\nconst configure = require('../../lib/configure')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\nconst abortSignal = require('../../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"appendData\"]}\n   */\n  async function appendData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('object/patch/append-data', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        ...options\n      }),\n      ...(\n        await multipartRequest(data, controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return new CID(Hash)\n  }\n  return appendData\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AAC/D,MAAME,SAAS,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,gCAAgC,CAAC;AACnE,MAAMI,WAAW,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AACrD,MAAM;EAAEK;AAAgB,CAAC,GAAGL,OAAO,CAAC,yBAAyB,CAAC;;AAE9D;AACA;AACA;AACA;;AAEAM,MAAM,CAACC,OAAO,GAAGL,SAAS,CAACM,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,UAAUA,CAAEC,GAAG,EAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAClD;IACA,MAAMC,UAAU,GAAG,IAAIR,eAAe,CAAC,CAAC;IACxC,MAAMS,MAAM,GAAGV,WAAW,CAACS,UAAU,CAACC,MAAM,EAAEF,OAAO,CAACE,MAAM,CAAC;;IAE7D;IACA,MAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,0BAA0B,EAAE;MACrDC,OAAO,EAAEL,OAAO,CAACK,OAAO;MACxBH,MAAM;MACNI,YAAY,EAAEf,iBAAiB,CAAC;QAC9BgB,GAAG,EAAE,GAAGT,GAAG,YAAYU,UAAU,GAAG,IAAIrB,GAAG,CAACW,GAAG,CAAC,GAAGA,GAAG,EAAE;QACxD,GAAGE;MACL,CAAC,CAAC;MACF,IACE,MAAMX,gBAAgB,CAACU,IAAI,EAAEE,UAAU,EAAED,OAAO,CAACS,OAAO,CAAC;IAE7D,CAAC,CAAC;IAEF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;IAEjC,OAAO,IAAIxB,GAAG,CAACuB,IAAI,CAAC;EACtB;EACA,OAAOb,UAAU;AACnB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}